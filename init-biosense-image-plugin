#!/bin/bash
#
# This is an sdm plugin for: sdm-biosense-init-image
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)" #For messages
args="$2"
loadparams
vldargs="" # |list|of|valid|args|or|nullstring|
rqdargs="" # |list|of|required|args|or|nullstring|
assetdir="$SDMPT/etc/sdm/assets/$pfx"

# Set the WireGuard interface name
WG_INTERFACE="biosense"

# Helper function to copy file trees
copy_and_set_ownership() {
    local src_dir=$1
    local dest_dir=$2
    local owner=$3
    local group=$4

    if [ -d "$src_dir" ]; then
        find "$src_dir" | while read -r src_item; do
            # Get the relative path of the item from the source directory
            rel_path="${src_item#$src_dir}"
            dest_item="$dest_dir$rel_path"

            # Check if the item exists in the destination
            if [ ! -e "$dest_item" ]; then
                if [ -d "$src_item" ]; then
                    # Create the directory in the destination
                    mkdir -p "$dest_item"
                    chown "$owner:$group" "$dest_item"
                elif [ -f "$src_item" ]; then
                    # Copy the file to the destination
                    cp "$src_item" "$dest_item"
                    chown "$owner:$group" "$dest_item"
                fi
                echo "Copied and set ownership for $dest_item"
            else
                echo "Skipped existing item $dest_item"
            fi
        done
    else
        logtoboth "No files found in $src_dir"
    fi
}

if [ "$phase" == "0" ]; then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    mkdir -p $assetdir

    # Check if there are SSH key files to copy
    if ls /home/agent/hostdir/biosense_ssh_keys/* 1>/dev/null 2>&1; then
        mkdir -p "$SDMPT/home/biosense/.ssh"
        for key_file in /home/agent/hostdir/biosense_ssh_keys/*; do
            cp "$key_file" "$SDMPT/home/biosense/.ssh"
        done
        logtoboth "Copied SSH keys to user biosense"
    else
        logtoboth "No SSH keys found, skipping copy step"
    fi

    # Copy the requirements.txt file if it exists
    if [ -f /home/agent/hostdir/python/requirements.txt ]; then
        cp /home/agent/hostdir/python/requirements.txt "$SDMPT/home/biosense"
        logtoboth "Copied requirements.txt file to /home/biosense/requirements.txt"
    else
        logtoboth "requirements.txt file not found, skipping copy step"
    fi

    # Copy the python wheel files if they exist
    if ls /home/agent/hostdir/python/*.whl 1>/dev/null 2>&1; then
        for wheel_file in /home/agent/hostdir/python/*.whl; do
            cp "$wheel_file" "$SDMPT/home/biosense/"
        done
        logtoboth "Copied python wheel files to /home/biosense/"
    else
        logtoboth "No python wheel files found, skipping copy step"
    fi

    # Copy etc files
    copy_and_set_ownership /home/agent/hostdir/etc $SDMPT/etc root root

    # Copy usr/local files
    copy_and_set_ownership /home/agent/hostdir/usr/local $SDMPT/usr/local root root

    logtoboth "Copied files to image"

    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]; then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase 1"

    # Set an autologout timer
    echo "TMOUT=600" >/etc/profile.d/autologout.sh
    echo "export TMOUT" >>/etc/profile.d/autologout.sh
    chmod +x /etc/profile.d/autologout.sh
    logtoboth "Automatic shell logout set to 10 minutes."

    # Change this to copy the file from the 0piboot directory
    cat >/etc/sdm/0piboot/010-config-eeprom.sh <<EOF
#!/bin/bash
echo '[all]' > /tmp/bootconf.txt
echo "BOOT_UART=1" >> /tmp/bootconf.txt
echo "POWER_OFF_ON_HALT=1" >> /tmp/bootconf.txt
echo "PSU_MAX_CURRENT=5000" >> /tmp/bootconf.txt
echo "BOOT_ORDER=0xf461" >> /tmp/bootconf.txt
sudo rpi-eeprom-config --apply /tmp/bootconf.txt
EOF
    chmod +x /etc/sdm/0piboot/010-config-eeprom.sh

    logtoboth "Created eeprom update script"

    mkdir -m 0755 -p /home/biosense/dataqueue /home/biosense/datastore
    chown biosense:biosense /home/biosense/dataqueue
    chown biosense:biosense /home/biosense/datastore

    logtoboth "Created dataqueue and datastore directories"

    raspi-config nonint do_change_locale C.UTF-8 &&
        logtoboth "Set locale to C.UTF-8"

    raspi-config nonint do_configure_keyboard 'Generic 104-key PC' &&
        logtoboth "Set keymap to Generic 104-key PC"

    # Create a virtual environment and install packages from requirements.txt
    sudo -u biosense bash <<EOF
    cd
    python3 -m venv /home/biosense/biosense_venv
    source /home/biosense/biosense_venv/bin/activate
    if [ -f /home/biosense/birdnetlib*.whl ]; then
        /home/biosense/biosense_venv/bin/pip install /home/biosense/birdnetlib*.whl
        rm -f /home/biosense/birdnetlib*.whl
    else
        curl -O https://files.pythonhosted.org/packages/ef/d7/13252c3c60ad1eafa2c78521e39be48d608c92c1e42d810f2ee91fc02b53/birdnetlib-0.17.2-py3-none-any.whl
        if [ -f birdnetlib-0.17.2-py3-none-any.whl ]; then
            /home/biosense/biosense_venv/bin/pip install birdnetlib-0.17.2-py3-none-any.whl
            rm -f birdnetlib-0.17.2-py3-none-any.whl
        else
            /home/biosense/biosense_venv/bin/pip install birdnetlib
        fi
    fi
    if ls *.whl 1>/dev/null 2>&1; then
        for wheel_file in *.whl; do
            /home/biosense/biosense_venv/bin/pip install \$wheel_file && \
            rm -f \$wheel_file
        done
    fi
    if [ -f /home/biosense/requirements.txt ]; then
        /home/biosense/biosense_venv/bin/pip install -r /home/biosense/requirements.txt && \
        rm -f /home/biosense/requirements.txt
    fi
EOF

    logtoboth "Created virtual environment and installed packages for biosense user from requirements.txt"

    logtoboth "* Plugin $pfx: Complete Phase 1"

elif [ "$phase" == "post-install" ]; then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase post-install"

    chown -R biosense:biosense /home/biosense/.ssh
    chmod -R go-rwx /home/biosense/.ssh

    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

echo "done."
exit 0
