#!/bin/bash

# Load SDM parameters
function loadparams() {
    source "$SDMPT/etc/sdm/sdm-readparams"
}

# Function to add a note to the end of the customization process
function plugin_addnote() {
    local note="$1"
    echo "$note" >>/etc/sdm/history
    echo "$note"
}

# Get the phase (0, 1, or post-install) and arguments
phase=$1
pfx="$(basename "$0")"
args="$2"
vldargs="|wg_ip|"
reqargs="|wg_ip|"
loadparams

# Set the WireGuard interface name
WG_INTERFACE="biosense"

# Extract arguments
plugin_getargs "$pfx" "$args" "$vldargs" "$reqargs" || exit

# Log the values for debugging
logtoboth "Plugin $pfx: wg_ip=${wg_ip}"

if [ "$phase" == "0" ]; then
    #
    # In Phase 0 all references to directories in the image
    # must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"

    # Check if there are SSH key files to copy
    if ls /home/agent/hostdir/biosense_ssh_keys/* 1>/dev/null 2>&1; then
        mkdir -p "$SDMPT/home/biosense/.ssh"
        for key_file in /home/agent/hostdir/biosense_ssh_keys/*; do
            cp "$key_file" "$SDMPT/home/biosense/.ssh"
        done
        logtoboth "Copied SSH keys to user biosense"
    else
        logtoboth "No SSH keys found, skipping copy step"
    fi

    # Copy the WireGuard configuration template if it exists
    if [ -f /home/agent/hostdir/wireguard/template.conf ]; then
        mkdir -p "$SDMPT/etc/wireguard"
        cp /home/agent/hostdir/wireguard/template.conf "$SDMPT/etc/wireguard/${WG_INTERFACE}.conf"
        chown -R root:root "$SDMPT/etc/wireguard"
        chmod -R go-rwx "$SDMPT/etc/wireguard"
        logtoboth "Copied template.conf to /etc/wireguard/${WG_INTERFACE}.conf"
    else
        logtoboth "template.conf not found, skipping copy step"
    fi

    # Copy the requirements.txt file if it exists
    if [ -f /home/agent/hostdir/python/requirements.txt ]; then
        cp /home/agent/hostdir/python/requirements.txt "$SDMPT/home/biosense"
        logtoboth "Copied requirements.txt file to /home/biosense/requirements.txt"
    else
        logtoboth "requirements.txt file not found, skipping copy step"
    fi

    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]; then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Phase 1"

    # Set an autologout timer
    echo "TMOUT=600" >/etc/profile.d/autologout.sh
    echo "export TMOUT" >>/etc/profile.d/autologout.sh
    chmod +x /etc/profile.d/autologout.sh
    logtoboth "Automatic shell logout set to 10 minutes."

    WG_DIR="/etc/wireguard"
    if [ -f "$WG_DIR/${WG_INTERFACE}.conf" ]; then
        # Generate WireGuard keys
        mkdir -p "$WG_DIR"
        cd "$WG_DIR" || exit
        umask 077
        wg genkey | tee privatekey | wg pubkey >publickey

        PRIVATE_KEY=$(cat privatekey)
        PUBLIC_KEY=$(cat publickey)

        # Update the client configuration
        sed -i "s|PrivateKey = .*|PrivateKey = ${PRIVATE_KEY}|" "${WG_DIR}/${WG_INTERFACE}.conf"
        sed -i "s|Address = .*|Address = ${wg_ip}/16|" "${WG_DIR}/${WG_INTERFACE}.conf"

        # Generate the command to append to the server configuration
        plugin_addnote "On the server run: sudo wg set ${WG_INTERFACE} peer ${PUBLIC_KEY} allowed-ips ${wg_ip}/32"
    else
        logtoboth "${WG_INTERFACE}.conf not found in /etc/wireguard, skipping client configuration update"
    fi

    # Change this to copy the file from the 0piboot directory
    cat >/etc/sdm/0piboot/010-config-eeprom.sh <<EOF
#!/bin/bash
rpi-eeprom-config > /tmp/bootconf.txt
echo "BOOT_UART=0" >> /tmp/bootconf.txt
echo "WAKE_ON_GPIO=1" >> /tmp/bootconf.txt
echo "POWER_OFF_ON_HALT=0" >> /tmp/bootconf.txt
echo "PSU_MAX_CURRENT=5000" >> /tmp/bootconf.txt
echo "BOOT_ORDER=0xf461" >> /tmp/bootconf.txt
sudo rpi-eeprom-config --apply /tmp/bootconf.txt
EOF
    chmod +x /etc/sdm/0piboot/010-config-eeprom.sh

    logtoboth "Created eeprom update script"

    mkdir -m 0755 -p /home/biosense/dataqueue /home/biosense/datastore
    chown biosense:biosense /home/biosense/dataqueue
    chown biosense:biosense /home/biosense/datastore

    logtoboth "Created dataqueue and datastore directories"

    raspi-config nonint do_change_locale C.UTF-8 && \
    logtoboth "Set locale to C.UTF-8"

    raspi-config nonint do_configure_keyboard 'Generic 104-key PC' && \
    logtoboth "Set keymap to Generic 104-key PC"

    # Create a virtual environment and install packages from requirements.txt
    sudo -u biosense bash <<EOF
    python3 -m venv /home/biosense/biosense_venv
    source /home/biosense/biosense_venv/bin/activate
    if [ -f /home/biosense/requirements.txt ]; then
        /home/biosense/biosense_venv/bin/pip install -r /home/biosense/requirements.txt && \
        rm -f /home/biosense/requirements.txt
    fi
EOF

    logtoboth "Created virtual environment and installed packages for biosense user from requirements.txt"

    logtoboth "* Plugin $pfx: Phase 1 completed"

elif [ "$phase" == "post-install" ]; then
    #
    # Post-install edits
    #
    logtoboth "* Plugin $pfx: Phase post-install"

    chown -R biosense:biosense /home/biosense/.ssh
    chmod -R go-rwx /home/biosense/.ssh
    
    sudo systemctl enable wg-quick@${WG_INTERFACE} && \
    logtoboth "Enabled wg-quick@${WG_INTERFACE} service"

    sudo systemctl start wg-quick@${WG_INTERFACE} && \
    logtoboth "Started wg-quick@${WG_INTERFACE} service"

    Edit sshd_config
    echo 'ListenAddress 0.0.0.0:2222' >> /etc/ssh/sshd_config && \
    echo "ListenAddress ${wg_ip}:22" >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config && \
    echo 'ChallengeResponseAuthentication no' >> /etc/ssh/sshd_config && \
    logtoboth "Configured sshd to listen on all interfaces on port 2222 and WireGuard IP on port 22, and disabled password authentication"

    # Download UPS codes
    sudo -u biosense git clone https://github.com/suptronics/x120x.git /home/biosense/suptronics && \
    logtoboth "Cloned subtronics repo"

    # Modify scripts to replace smbus with smbus2
    find /home/biosense/suptronics -type f -name '*.py' -exec sed -i 's/\bsmbus\b/smbus2/g' {} \; && \
    logtoboth "Replaced smbus with smbus2 in scripts"

    logtoboth "* Plugin $pfx: Phase post-install Completed"
fi

echo "done."
exit 0
