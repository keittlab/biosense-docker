#!/bin/bash

# Load SDM parameters
function loadparams() {
    source "$SDMPT/etc/sdm/sdm-readparams"
}

# Function to add a note to the end of the customization process
function plugin_addnote() {
    local note="$1"
    echo "$note" >>/etc/sdm/history
    echo "$note"
}

# Helper function to copy file trees
copy_and_set_ownership() {
    local src_dir=$1
    local dest_dir=$2
    local owner=$3
    local group=$4

    if [ -d "$src_dir" ]; then
        find "$src_dir" | while read -r src_item; do
            rel_path="${src_item#$src_dir}"
            dest_item="$dest_dir$rel_path"
            if [ ! -e "$dest_item" ]; then
                if [ -d "$src_item" ]; then
                    mkdir -p "$dest_item"
                    chown "$owner:$group" "$dest_item"
                elif [ -f "$src_item" ]; then
                    cp "$src_item" "$dest_item"
                    chown "$owner:$group" "$dest_item"
                fi
            fi
        done
    else
        logtoboth "No files found in $src_dir"
    fi
}

# Function to update APN, IP address, and gateway in /etc/biosense/setup-modem.conf
update_config_file() {
    local apn_value="$1"
    local ip_value="$2"
    local gateway_value="$3"
    local config_file="$4"

    if [ -f "$config_file" ]; then
        [ -n "$apn_value" ] && sed -i "s/^apn=.*/apn=$apn_value/" "$config_file" &&
            logtoboth "Updated APN value to '$apn_value' in $config_file"
        [ -n "$ip_value" ] && sed -i "s/^ip_address=.*/ip_address=$ip_value/" "$config_file" &&
            logtoboth "Updated IP address to '$ip_value' in $config_file"
        [ -n "$gateway_value" ] && sed -i "s/^gateway=.*/gateway=$gateway_value/" "$config_file" &&
            logtoboth "Updated gateway to '$gateway_value' in $config_file"
    else
        logtoboth "Config file $config_file does not exist."
    fi
}

# Get the phase (0, 1, or post-install) and arguments
phase=$1
pfx="$(basename "$0")"
args="$2"
vldargs="|wg_ip|latitude|longitude|edit_sshd_config|apn|ip_address|gateway|"
reqargs="|wg_ip|latitude|longitude|"
loadparams

# Set the WireGuard interface name
WG_INTERFACE="biosense"
APN_CONFIG_FILE="/etc/biosense/setup-modem.conf"

# Extract arguments
plugin_getargs "$pfx" "$args" "$vldargs" "$reqargs" || exit

if [ "$phase" == "0" ]; then
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs "$pfx" "$args" "$vldargs" "$reqargs" || exit
    plugin_printkeys
    mkdir -p $assetdir
    logtoboth "Plugin $pfx: wg_ip=${wg_ip}, latitude=${latitude}, longitude=${longitude}, apn=${apn}, ip_address=${ip_address}, gateway=${gateway}, edit_sshd_config=${edit_sshd_config}"
    copy_and_set_ownership /home/agent/hostdir/files/home/biosense $SDMPT/home/biosense 1000 1000
    copy_and_set_ownership /home/agent/hostdir/files/etc $SDMPT/etc root root
    copy_and_set_ownership /home/agent/hostdir/files/usr/local $SDMPT/usr/local root root
    copy_and_set_ownership /home/agent/hostdir/files/var/log $SDMPT/var/log 1000 1000
    logtoboth "Copied files to image"
    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]; then
    logtoboth "* Plugin $pfx: Phase 1"
    if [ -f "/etc/wireguard/template.conf" ]; then
        mv /etc/wireguard/template.conf "/etc/wireguard/${WG_INTERFACE}.conf"
        umask 077
        wg genkey | tee /etc/wireguard/privatekey | wg pubkey >/etc/wireguard/publickey
        PRIVATE_KEY=$(cat /etc/wireguard/privatekey)
        PUBLIC_KEY=$(cat /etc/wireguard/publickey)
        sed -i "s|PrivateKey = .*|PrivateKey = ${PRIVATE_KEY}|" "/etc/wireguard/${WG_INTERFACE}.conf"
        sed -i "s|Address = .*|Address = ${wg_ip}/16|" "/etc/wireguard/${WG_INTERFACE}.conf"
        plugin_addnote "On the server run: sudo wg set ${WG_INTERFACE} peer ${PUBLIC_KEY} persistent-keepalive 25 allowed-ips ${wg_ip}/32 "
    else
        logtoboth "template.conf not found in /etc/wireguard, skipping client configuration update"
    fi
    raspi-config nonint do_change_locale C.UTF-8 && logtoboth "Set locale to C.UTF-8"
    raspi-config nonint do_configure_keyboard 'Generic 104-key PC' && logtoboth "Set keymap to Generic 104-key PC"
    update_config_file "$apn" "$ip_address" "$gateway" "$APN_CONFIG_FILE"
    sudo -u biosense /home/biosense/python/setup-python
    logtoboth "Created virtual environment and installed packages for biosense user from requirements.txt"
    echo "LATITUDE=${latitude}" >/etc/profile.d/geolocation.sh
    echo "export LATITUDE" >>/etc/profile.d/geolocation.sh
    echo "LONGITUDE=${longitude}" >>/etc/profile.d/geolocation.sh
    echo "export LONGITUDE" >>/etc/profile.d/geolocation.sh
    logtoboth "Added latitude and longitude environment variables"
    logtoboth "* Plugin $pfx: Phase 1 completed"

elif [ "$phase" == "post-install" ]; then
    logtoboth "* Plugin $pfx: Phase post-install"
    if [ "$edit_sshd_config" == "true" ]; then
        echo 'PasswordAuthentication no' >>/etc/ssh/sshd_config && echo 'ChallengeResponseAuthentication no' >>/etc/ssh/sshd_config &&
            logtoboth "Configured sshd_config"
    fi
    enable_services=(
        "wg-quick@${WG_INTERFACE}"
        "ups-monitor.service"
        "read-bme280.service"
        "record-sound.service"
        "run-birdnet.service"
        "manage-disk-space.service"
        "compress-recordings.service"
        "read-vegetronix.service"
        "case-led.service"
    )
    for service in "${enable_services[@]}"; do
        sudo systemctl enable "$service" && logtoboth "Enabled $service"
    done
    ln -b -f -s /usr/share/zoneinfo/UTC /etc/localtime && logtoboth "Set timezone to UTC" || logtoboth "Failed to set timezone to UTC"
    logtoboth "* Plugin $pfx: Phase post-install Completed"
fi

echo "done."
exit 0
