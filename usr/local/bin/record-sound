#!/usr/bin/env python3

import os
import shutil
import signal
import sys
from subprocess import Popen, PIPE
import configparser

# Activate the virtual environment
venv_path = '/home/biosense/biosense_venv/bin/activate_this.py'
if os.path.exists(venv_path):
    with open(venv_path) as file_:
        exec(file_.read(), {'__file__': venv_path})

# Function to read configuration with error handling
def read_config(config_file):
    config = configparser.ConfigParser()
    try:
        config.read(config_file)
        if not config.sections():
            raise Exception("Configuration file is empty or not found.")
        return config
    except Exception as e:
        print(f"Error reading configuration file: {e}")
        sys.exit(1)

# Read configuration
config_file = '/etc/biosense/record-sound.conf'
config = read_config(config_file)

RECORDING_DIR = config.get('DEFAULT', 'RECORDING_DIR', fallback='/home/biosense/datastore/sounds_recordings/')
MAX_DISK_USAGE = config.getint('DEFAULT', 'MAX_DISK_USAGE', fallback=90)
RECORDING_DURATION = config.getint('DEFAULT', 'RECORDING_DURATION', fallback=15)
CHANNELS = config.getint('DEFAULT', 'CHANNELS', fallback=1)  # 1 for mono, 2 for stereo

def check_disk_usage():
    total, used, free = shutil.disk_usage("/")
    return used / total * 100

def start_recording():
    arecord_command = [
        "arecord", "-f", "S16_LE", f"-c{CHANNELS}", "-r48000", "-t", "wav",
        "--max-file-time", str(RECORDING_DURATION), "--use-strftime", f"{RECORDING_DIR}/%F-birdnet-%H:%M:%S.wav"
    ]
    return Popen(arecord_command, stdout=PIPE, stderr=PIPE)

def main():
    if not os.path.exists(RECORDING_DIR):
        os.makedirs(RECORDING_DIR)

    record_process = start_recording()

    def signal_handler(sig, frame):
        record_process.terminate()
        record_process.wait()
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    try:
        while True:
            if check_disk_usage() > MAX_DISK_USAGE:
                print("Disk usage high. Stopping recording.")
                record_process.terminate()
                record_process.wait()
                sys.exit(0)
            record_process.wait()
    except KeyboardInterrupt:
        print("Gracefully exiting...")
        record_process.terminate()
        record_process.wait()

if __name__ == "__main__":
    main()
