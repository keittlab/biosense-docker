#!/usr/bin/env python3

import os
import sys
import sqlite3
import psycopg2
from time import sleep, strftime
import board
from adafruit_bme280 import basic as adafruit_bme280
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import configparser
from datetime import datetime
from urllib.parse import urlparse
import shutil

# Activate the virtual environment
venv_path = '/home/biosense/biosense_venv/bin/activate_this.py'
if os.path.exists(venv_path):
    with open(venv_path) as file_:
        exec(file_.read(), {'__file__': venv_path})

# SQLAlchemy setup
Base = declarative_base()

class BME280Reading(Base):
    __tablename__ = 'bme280_readings'
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    temperature = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    latitude = Column(Float)
    longitude = Column(Float)

def get_engine(db_type, db_path, db_host, db_port, db_name, db_user, db_password):
    if db_type == 'postgresql':
        return create_engine(f'postgresql+psycopg2://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}')
    else:
        return create_engine(f'sqlite:///{db_path}')

def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

def initialize_sensor():
    i2c = board.I2C()
    try:
        bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)
        bme280.sea_level_pressure = 1013.25  # Standard atmospheric pressure at sea level in hPa
        return bme280
    except Exception as e:
        print(f"{strftime('%Y-%m-%d %H:%M:%S')}: BME280 i2c address could not be found. {e}")
        return None

def get_sensor_data(bme280):
    data = {
        'temp': 'n/a',
        'hum': 'n/a',
        'pres': 'n/a',
    }
    
    if bme280:
        try:
            data['temp'] = bme280.temperature
        except Exception as e:
            print(f"{strftime('%Y-%m-%d %H:%M:%S')}: Could not collect temperature data from the BME280. {e}")
        
        try:
            data['hum'] = bme280.relative_humidity
        except Exception as e:
            print(f"{strftime('%Y-%m-%d %H:%M:%S')}: Could not collect humidity data from the BME280. {e}")
        
        try:
            data['pres'] = bme280.pressure
        except Exception as e:
            print(f"{strftime('%Y-%m-%d %H:%M:%S')}: Could not collect pressure data from the BME280. {e}")
    
    return data

def load_config(config_file):
    config = configparser.ConfigParser()
    try:
        config.read(config_file)
        if not config.sections():
            raise Exception("Configuration file is empty or not found.")
        return config
    except Exception as e:
        print(f"Error reading configuration file: {e}")
        sys.exit(1)

def parse_db_conn(db_conn_str):
    db_url = urlparse(db_conn_str)
    if db_url.scheme == 'sqlite':
        return 'sqlite', db_url.path
    elif db_url.scheme == 'postgresql':
        return 'postgresql', db_conn_str
    else:
        raise ValueError("Unsupported database type")

def check_disk_usage(max_usage):
    total, used, free = shutil.disk_usage("/")
    return used / total * 100 > max_usage

def main():
    config_file = '/etc/biosense/read-bme280.conf'
    config = load_config(config_file)

    interval = config.getint('DEFAULT', 'INTERVAL', fallback=300)
    db_type = config.get('DEFAULT', 'DB_TYPE', fallback='sqlite')
    db_path = config.get('DEFAULT', 'DB_PATH', fallback='/home/biosense/datastore/sensor_data.db')
    db_host = config.get('DEFAULT', 'DB_HOST', fallback='localhost')
    db_port = config.getint('DEFAULT', 'DB_PORT', fallback=5432)
    db_name = config.get('DEFAULT', 'DB_NAME', fallback='biosense')
    db_user = config.get('DEFAULT', 'DB_USER', fallback='biosense')
    db_password = config.get('DEFAULT', 'DB_PASSWORD', fallback='biosense')
    max_disk_usage = config.getint('DEFAULT', 'MAX_DISK_USAGE', fallback=90)
    test_mode = config.getboolean('DEFAULT', 'TEST_MODE', fallback=False)
    latitude = float(os.getenv('LATITUDE', '0.0'))
    longitude = float(os.getenv('LONGITUDE', '0.0'))

    if test_mode:
        print("Running in test mode")
        db_path = '/home/biosense/datastore/test_sensor_data.db'
        db_type = 'sqlite'

    engine = get_engine(db_type, db_path, db_host, db_port, db_name, db_user, db_password)
    session = create_session(engine)

    Base.metadata.create_all(engine)

    bme280 = initialize_sensor()

    print(f"Recording BME280 readings to {db_type} database every {interval} seconds")

    while True:
        if check_disk_usage(max_disk_usage):
            print(f"{strftime('%Y-%m-%d %H:%M:%S')}: Disk usage is above {max_disk_usage}%. Stopping recording.")
            sys.exit(1)

        data = get_sensor_data(bme280)
        new_reading = BME280Reading(
            temperature=data['temp'],
            humidity=data['hum'],
            pressure=data['pres'],
            latitude=latitude,
            longitude=longitude
        )
        session.add(new_reading)
        session.commit()
        print(f"Date: {strftime('%Y-%m-%d')}, Time: {strftime('%H:%M:%S')}, Temp: {data['temp']}, Hum: {data['hum']}, Pres: {data['pres']}, Lat: {latitude}, Lon: {longitude}")
        sleep(interval)  # Sleep for the specified interval

if __name__ == "__main__":
    main()
