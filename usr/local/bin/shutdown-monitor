#!/usr/bin/env python3

import os
import struct
import configparser
from smbus2 import SMBus
import time
import argparse
import gpiod
from subprocess import call

def readVoltage(bus, address):
    read = bus.read_word_data(address, 2)
    swapped = struct.unpack("<H", struct.pack(">H", read))[0]
    voltage = swapped * 1.25 / 1000 / 16
    return voltage

def readCapacity(bus, address):
    read = bus.read_word_data(address, 4)
    swapped = struct.unpack("<H", struct.pack(">H", read))[0]
    capacity = swapped / 256
    return capacity

def get_battery_status(voltage):
    print(f"Debug: Checking battery status for voltage: {voltage:.2f}")
    if voltage > 3.78:
        return "Full"
    elif 3.7 <= voltage <= 3.78:
        return "High"
    elif 3.55 <= voltage < 3.7:
        return "Medium"
    elif 3.4 <= voltage < 3.55:
        return "Low"
    elif voltage < 3.4:
        return "Critical"
    else:
        return "Unknown"

def ensure_single_instance(pidfile):
    pid = str(os.getpid())
    if os.path.isfile(pidfile):
        print("Script already running")
        exit(1)
    else:
        with open(pidfile, 'w') as f:
            f.write(pid)

def load_config(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    return config

def main():
    config_file = '/etc/biosense/ups_monitor.conf'
    config = load_config(config_file)

    shutdown_threshold = int(config['DEFAULT'].get('shutdown_threshold', 3))
    pld_pin = int(config['DEFAULT'].get('pld_pin', 6))
    battery_low_threshold = int(config['DEFAULT'].get('battery_low_threshold', 20))
    voltage_threshold = float(config['DEFAULT'].get('voltage_threshold', 3.20))
    check_interval = int(config['DEFAULT'].get('check_interval', 60))
    shutdown_delay = int(config['DEFAULT'].get('shutdown_delay', 1))
    bus_number = int(config['DEFAULT'].get('bus', 1))
    address = int(config['DEFAULT'].get('address', 0x36), 16)
    loop = config['DEFAULT'].get('loop', 'true').lower() == 'true'

    pidfile = "/run/X1200.pid"
    ensure_single_instance(pidfile)

    shutdown_initiated = False

    try:
        bus = SMBus(bus_number)
        chip = gpiod.Chip('gpiochip4')
        pld_line = chip.get_line(pld_pin)
        pld_line.request(consumer="PLD", type=gpiod.LINE_REQ_DIR_IN)

        while True:
            failure_counter = 0

            while failure_counter < shutdown_threshold:
                ac_power_state = pld_line.get_value()
                voltage = readVoltage(bus, address)
                battery_status = get_battery_status(voltage)
                capacity = readCapacity(bus, address)
                print(f"Capacity: {capacity:.2f}% ({battery_status}), AC Power State: {'Plugged in' if ac_power_state == 1 else 'Unplugged'}, Voltage: {voltage:.2f}V")

                if ac_power_state == 1:
                    # Cancel any pending shutdown if AC power is present
                    if shutdown_initiated:
                        call("sudo shutdown -c", shell=True)
                        shutdown_initiated = False
                        print("Shutdown canceled due to AC power restored.")
                    # Reset failure counter and continue checking
                    failure_counter = 0
                elif capacity < battery_low_threshold:
                    print("Battery level critical.")
                    failure_counter += 1
                elif voltage < voltage_threshold:
                    print("Battery voltage critical.")
                    failure_counter += 1
                else:
                    failure_counter = 0

                if failure_counter < shutdown_threshold:
                    time.sleep(check_interval)
                else:
                    break

            if failure_counter >= shutdown_threshold and not shutdown_initiated:
                shutdown_reason = ""
                if capacity < battery_low_threshold:
                    shutdown_reason = "due to critical battery level."
                elif voltage < voltage_threshold:
                    shutdown_reason = "due to critical battery voltage."

                shutdown_message = f"Critical condition met {shutdown_reason} Initiating shutdown."
                print(shutdown_message)
                call(f"nohup shutdown -h +{shutdown_delay} '{shutdown_message}' > /dev/null 2>&1", shell=True)
                shutdown_initiated = True

            if not loop:
                break
            time.sleep(check_interval)
    finally:
        if os.path.isfile(pidfile):
            os.unlink(pidfile)
        exit(0)

if __name__ == "__main__":
    main()
