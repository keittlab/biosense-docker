#!/usr/bin/python3

import os
import struct
from smbus2 import SMBus
import time
import argparse
import gpiod
from subprocess import call

def readVoltage(bus, address):
    read = bus.read_word_data(address, 2)
    swapped = struct.unpack("<H", struct.pack(">H", read))[0]
    voltage = swapped * 1.25 / 1000 / 16
    return voltage

def readCapacity(bus, address):
    read = bus.read_word_data(address, 4)
    swapped = struct.unpack("<H", struct.pack(">H", read))[0]
    capacity = swapped / 256
    return capacity

def get_battery_status(voltage):
    print(f"Debug: Checking battery status for voltage: {voltage:.2f}")
    if voltage > 3.78:
        return "Full"
    elif 3.7 <= voltage <= 3.78:
        return "High"
    elif 3.55 <= voltage < 3.7:
        return "Medium"
    elif 3.4 <= voltage < 3.55:
        return "Low"
    elif voltage < 3.4:
        return "Critical"
    else:
        return "Unknown"

def ensure_single_instance(pidfile):
    pid = str(os.getpid())
    if os.path.isfile(pidfile):
        print("Script already running")
        exit(1)
    else:
        with open(pidfile, 'w') as f:
            f.write(pid)

def main():
    parser = argparse.ArgumentParser(description='UPS Monitoring Script for Raspberry Pi')
    parser.add_argument('--shutdown_threshold', type=int, default=3, help='Number of consecutive failures required for shutdown')
    parser.add_argument('--pld_pin', type=int, default=6, help='GPIO pin for power loss detection')
    parser.add_argument('--battery_low_threshold', type=int, default=20, help='Battery low percentage threshold')
    parser.add_argument('--voltage_threshold', type=float, default=3.20, help='Voltage threshold for shutdown')
    parser.add_argument('--check_interval', type=int, default=60, help='Time interval (seconds) between checks')
    parser.add_argument('--shutdown_delay', type=int, default=1, help='Shutdown delay in minutes')
    parser.add_argument('--bus', type=int, default=1, help='I2C bus number')
    parser.add_argument('--address', type=int, default=0x36, help='I2C device address')
    parser.add_argument('--loop', action='store_true', help='Enable looping')
    args = parser.parse_args()

    pidfile = "/run/X1200.pid"
    ensure_single_instance(pidfile)

    shutdown_initiated = False

    try:
        bus = SMBus(args.bus)
        address = args.address
        chip = gpiod.Chip('gpiochip4')
        pld_line = chip.get_line(args.pld_pin)
        pld_line.request(consumer="PLD", type=gpiod.LINE_REQ_DIR_IN)

        while True:
            failure_counter = 0

            while failure_counter < args.shutdown_threshold:
                ac_power_state = pld_line.get_value()
                voltage = readVoltage(bus, address)
                battery_status = get_battery_status(voltage)
                capacity = readCapacity(bus, address)
                print(f"Capacity: {capacity:.2f}% ({battery_status}), AC Power State: {'Plugged in' if ac_power_state == 1 else 'Unplugged'}, Voltage: {voltage:.2f}V")

                if ac_power_state == 1:
                    # Cancel any pending shutdown if AC power is present
                    if shutdown_initiated:
                        call("sudo shutdown -c", shell=True)
                        shutdown_initiated = False
                        print("Shutdown canceled due to AC power restored.")
                    # Reset failure counter and continue checking
                    failure_counter = 0
                elif capacity < args.battery_low_threshold:
                    print("Battery level critical.")
                    failure_counter += 1
                elif voltage < args.voltage_threshold:
                    print("Battery voltage critical.")
                    failure_counter += 1
                else:
                    failure_counter = 0

                if failure_counter < args.shutdown_threshold:
                    time.sleep(args.check_interval)
                else:
                    break

            if failure_counter >= args.shutdown_threshold and not shutdown_initiated:
                shutdown_reason = ""
                if capacity < args.battery_low_threshold:
                    shutdown_reason = "due to critical battery level."
                elif voltage < args.voltage_threshold:
                    shutdown_reason = "due to critical battery voltage."

                shutdown_message = f"Critical condition met {shutdown_reason} Initiating shutdown."
                print(shutdown_message)
                call(f"nohup shutdown -h +{args.shutdown_delay} '{shutdown_message}' > /dev/null 2>&1", shell=True)
                shutdown_initiated = True

            if not args.loop:
                break
            time.sleep(args.check_interval)
    finally:
        if os.path.isfile(pidfile):
            os.unlink(pidfile)
        exit(0)

if __name__ == "__main__":
    main()
