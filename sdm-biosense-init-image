#!/bin/bash
#
# This is an sdm plugin for: sdm-biosense-init-image
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

# Function to add a note to the end of the customization process
function plugin_addnote() {
    local note="$1"
    echo "$note" >>/etc/sdm/history
    echo "$note"
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     # For messages
args="$2"
loadparams
vldargs=""
rqdargs=""
assetdir="$SDMPT/etc/sdm/assets/$pfx"

# Set the WireGuard interface name
WG_INTERFACE="biosense"

if [ "$phase" == "0" ]; then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    mkdir -p $assetdir

    # Check if there are SSH key files to copy
    if ls /home/agent/hostdir/biosense_ssh_keys/* 1>/dev/null 2>&1; then
        mkdir -p "$SDMPT/home/biosense/.ssh"
        for key_file in /home/agent/hostdir/biosense_ssh_keys/*; do
            cp "$key_file" "$SDMPT/home/biosense/.ssh"
        done
        logtoboth "Copied SSH keys to user biosense"
    else
        logtoboth "No SSH keys found, skipping copy step"
    fi

    # Copy the WireGuard configuration template if it exists
    if [ -f /home/agent/hostdir/wireguard/template.conf ]; then
        mkdir -p "$SDMPT/etc/wireguard"
        cp /home/agent/hostdir/wireguard/template.conf "$SDMPT/etc/wireguard/${WG_INTERFACE}.conf"
        chown -R root:root "$SDMPT/etc/wireguard"
        chmod -R go-rwx "$SDMPT/etc/wireguard"
        logtoboth "Copied template.conf to /etc/wireguard/${WG_INTERFACE}.conf"
    else
        logtoboth "template.conf not found, skipping copy step"
    fi

    # Copy the requirements.txt file if it exists
    if [ -f /home/agent/hostdir/python/requirements.txt ]; then
        cp /home/agent/hostdir/python/requirements.txt "$SDMPT/home/biosense"
        logtoboth "Copied requirements.txt file to /home/biosense/requirements.txt"
    else
        logtoboth "requirements.txt file not found, skipping copy step"
    fi

    # Copy scripts to /usr/local/bin
    if ls /home/agent/hostdir/scripts/* 1>/dev/null 2>&1; then
        mkdir -p "$SDMPT/usr/local/bin"
        for script_file in /home/agent/hostdir/scripts/*; do
            cp "$script_file" "$SDMPT/usr/local/bin"
            chmod +x "$SDMPT/usr/local/bin/$(basename "$script_file")"
            chown root:root "$SDMPT/usr/local/bin/$(basename "$script_file")"
        done
        logtoboth "Copied scripts to /usr/local/bin"
    else
        logtoboth "No scripts found, skipping copy step"
    fi

    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]; then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase 1"
    
    # Set an autologout timer
    echo "TMOUT=600" >/etc/profile.d/autologout.sh
    echo "export TMOUT" >>/etc/profile.d/autologout.sh
    chmod +x /etc/profile.d/autologout.sh
    logtoboth "Automatic shell logout set to 10 minutes."

    # Change this to copy the file from the 0piboot directory
    cat >/etc/sdm/0piboot/010-config-eeprom.sh <<EOF
#!/bin/bash
echo '[all]' > /tmp/bootconf.txt
echo "BOOT_UART=1" >> /tmp/bootconf.txt
echo "POWER_OFF_ON_HALT=1" >> /tmp/bootconf.txt
echo "PSU_MAX_CURRENT=5000" >> /tmp/bootconf.txt
echo "BOOT_ORDER=0xf461" >> /tmp/bootconf.txt
sudo rpi-eeprom-config --apply /tmp/bootconf.txt
EOF
    chmod +x /etc/sdm/0piboot/010-config-eeprom.sh

    logtoboth "Created eeprom update script"

    mkdir -m 0755 -p /home/biosense/dataqueue /home/biosense/datastore
    chown biosense:biosense /home/biosense/dataqueue
    chown biosense:biosense /home/biosense/datastore

    logtoboth "Created dataqueue and datastore directories"

    raspi-config nonint do_change_locale C.UTF-8 && \
    logtoboth "Set locale to C.UTF-8"

    raspi-config nonint do_configure_keyboard 'Generic 104-key PC' && \
    logtoboth "Set keymap to Generic 104-key PC"

    # Create a virtual environment and install packages from requirements.txt
    sudo -u biosense bash <<'EOF'
    python3 -m venv /home/biosense/biosense_venv
    source /home/biosense/biosense_venv/bin/activate
    if [ -f /home/biosense/requirements.txt ]; then
        /home/biosense/biosense_venv/bin/pip install -r /home/biosense/requirements.txt && \
        rm -f /home/biosense/requirements.txt
    fi
EOF

    logtoboth "Created virtual environment and installed packages for biosense user from requirements.txt"

    logtoboth "* Plugin $pfx: Complete Phase 1"

elif [ "$phase" == "post-install" ]; then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase post-install"

    chown -R biosense:biosense /home/biosense/.ssh
    chmod -R go-rwx /home/biosense/.ssh
    
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

echo "done."
exit 0
