#!/usr/bin/env python3

import os
import configparser
from sqlalchemy import create_engine, Column, Integer, Float, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime
import sys
import logging
from logging.handlers import RotatingFileHandler

# Configure logging
log_dir = '/var/log/biosense/'
log_file = os.path.join(log_dir, 'migrate-bme280-data.log')
log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Function to read configuration with error handling
def read_config(config_file):
    config = configparser.ConfigParser()
    try:
        config.read(config_file)
        if not config.sections():
            raise Exception("Configuration file is empty or not found.")
        return config
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)

# Read configuration
config_file = '/etc/biosense/migrate-bme280-data.conf'
config = read_config(config_file)

DB_TYPE = config.get('DEFAULT', 'DB_TYPE', fallback='sqlite')
DB_PATH = config.get('DEFAULT', 'DB_PATH', fallback='/home/biosense/datastore/bme280_data.db')
DB_HOST = config.get('DEFAULT', 'DB_HOST', fallback='10.123.0.1')
DB_PORT = config.getint('DEFAULT', 'DB_PORT', fallback=5432)
DB_NAME = config.get('DEFAULT', 'DB_NAME', fallback='biosense')
DB_USER = config.get('DEFAULT', 'DB_USER', fallback='biosense')
DB_PASSWORD = config.get('DEFAULT', 'DB_PASSWORD', fallback='biosense')

# SQLAlchemy setup
Base = declarative_base()

class BME280Reading(Base):
    __tablename__ = 'bme280_readings'
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    temperature = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    latitude = Column(Float)
    longitude = Column(Float)

def get_engine(db_type, db_path=None, db_host=None, db_port=None, db_name=None, db_user=None, db_password=None):
    if db_type == 'postgresql':
        return create_engine(f'postgresql+psycopg2://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}')
    else:
        return create_engine(f'sqlite:///{db_path}')

def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

if DB_TYPE == 'postgresql':
    # Create engines and sessions for both SQLite and PostgreSQL
    sqlite_engine = get_engine('sqlite', DB_PATH)
    sqlite_session = create_session(sqlite_engine)
    postgres_engine = get_engine('postgresql', None, DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD)
    postgres_session = create_session(postgres_engine)

    Base.metadata.create_all(sqlite_engine)
    Base.metadata.create_all(postgres_engine)

    def migrate_data():
        try:
            # Check if local SQLite database has data
            count = sqlite_session.query(BME280Reading).count()
            if count == 0:
                logging.info("Local SQLite database is empty. No data to migrate.")
                return

            # Fetch data from SQLite
            sqlite_data = sqlite_session.query(BME280Reading).all()
            if sqlite_data:
                for reading in sqlite_data:
                    postgres_reading = BME280Reading(
                        timestamp=reading.timestamp,
                        temperature=reading.temperature,
                        humidity=reading.humidity,
                        pressure=reading.pressure,
                        latitude=reading.latitude,
                        longitude=reading.longitude
                    )
                    postgres_session.add(postgres_reading)
                postgres_session.commit()
                # Delete data from SQLite after successful migration
                sqlite_session.query(BME280Reading).delete()
                sqlite_session.commit()
                logging.info("Data migrated from SQLite to PostgreSQL")
        except SQLAlchemyError as e:
            logging.error(f"Error during data migration: {e}")
            postgres_session.rollback()
            sqlite_session.rollback()

    if __name__ == "__main__":
        migrate_data()
else:
    if __name__ == "__main__":
        logging.info("Database type is set to SQLite. No migration needed.")
        sys.exit(0)
