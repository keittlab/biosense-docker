#!/usr/bin/env python3

import os
import sys
import logging
from datetime import datetime, timedelta
from sqlalchemy import create_engine, Column, Integer, DateTime, Boolean, String, Float
from sqlalchemy.orm import declarative_base, sessionmaker
import toml
import subprocess
from logging.handlers import RotatingFileHandler
import random

# Configure logging
log_dir = "/var/log/biosense/"
log_file = os.path.join(log_dir, "connectivity-check.log")
os.makedirs(log_dir, exist_ok=True)

log_handler = RotatingFileHandler(log_file, maxBytes=1 * 1024 * 1024, backupCount=5)
logging.basicConfig(
    level=logging.INFO,
    handlers=[log_handler],
    format="%(asctime)s - %(levelname)s - %(message)s",
)

Base = declarative_base()


class PingData(Base):
    __tablename__ = "ping_data"
    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String)
    latitude = Column(Float)
    longitude = Column(Float)
    timestamp = Column(DateTime, default=datetime.utcnow)
    success = Column(Boolean)


def get_engine(db_path):
    return create_engine(f"sqlite:///{db_path}")


def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session


def load_db_path():
    config_file = "/etc/biosense/ping-server.conf"
    try:
        with open(config_file, "r") as f:
            config = toml.load(f)
        db_path = config["DEFAULT"].get(
            "DB_PATH", "/home/biosense/datastore/ping_data.db"
        )
        return db_path
    except Exception as e:
        logging.error(f"Error reading ping-server configuration file: {e}")
        sys.exit(1)


def action_required(session, interval):
    time_threshold = datetime.utcnow() - interval
    total_count = (
        session.query(PingData).filter(PingData.timestamp >= time_threshold).count()
    )
    success_count = (
        session.query(PingData)
        .filter(PingData.timestamp >= time_threshold, PingData.success == True)
        .count()
    )
    return total_count > 0 and success_count == 0


def active_sessions():
    try:
        result = subprocess.run(["who"], capture_output=True, text=True, check=True)
        if not result.stdout.strip():
            logging.info("No active sessions detected by 'who'.")
            return False
        active_ttys = [
            line.split()[1]
            for line in result.stdout.strip().split("\n")
            if len(line.split()) > 1
        ]
        return any(os.path.exists(f"/dev/{tty}") for tty in active_ttys)
    except Exception as e:
        logging.error(f"Error checking active sessions: {e}")
        return False


def restart_networking():
    if active_sessions():
        logging.info("Active sessions detected; skipping network restart.")
    else:
        try:
            subprocess.run(["sudo", "systemctl", "restart", "networking"], check=True)
            logging.info("Networking service restarted successfully.")
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to restart networking service: {e}")


def reboot():
    if active_sessions():
        logging.info("Active sessions detected; skipping reboot.")
    else:
        try:
            delay_minutes = random.randint(10, 60)
            logging.info(f"System will reboot in {delay_minutes} minute(s).")
            subprocess.run(
                ["sudo", "shutdown", f"+{delay_minutes}", "reboot"], check=True
            )
        except subprocess.CalledProcessError as e:
            logging.error(f"Scheduled reboot failed: {e}")


def main():
    db_path = load_db_path()
    engine = get_engine(db_path)
    Session = create_session(engine)
    session = Session()

    try:
        # Check for weekly condition (reboot if necessary)
        if action_required(session, timedelta(weeks=1)):
            logging.warning("No successful pings in the last 1 week. Rebooting system.")
            reboot()
        else:
            # Check for daily condition (restart networking if necessary)
            if action_required(session, timedelta(days=1)):
                logging.warning(
                    "No successful pings in the last 1 day. Restarting networking."
                )
                restart_networking()
    finally:
        session.close()


if __name__ == "__main__":
    main()
