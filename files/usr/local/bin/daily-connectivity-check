#!/usr/bin/env python3

import os
import sys
import logging
from datetime import datetime, timedelta
from sqlalchemy import create_engine, Column, Integer, DateTime, Boolean
from sqlalchemy.orm import sessionmaker
import toml
import subprocess
from logging.handlers import RotatingFileHandler

# Configure logging
log_dir = "/var/log/biosense/"
log_file = os.path.join(log_dir, "daily-connectivity-check.log")
os.makedirs(log_dir, exist_ok=True)

log_handler = RotatingFileHandler(log_file, maxBytes=1 * 1024 * 1024, backupCount=5)
logging.basicConfig(
    level=logging.INFO,
    handlers=[log_handler],
    format="%(asctime)s - %(levelname)s - %(message)s",
)


# SQLAlchemy setup
class PingData:
    __tablename__ = "ping_data"
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    success = Column(Boolean)


def get_engine(db_path):
    return create_engine(f"sqlite:///{db_path}")


def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()


def load_db_path():
    config_file = "/etc/biosense/ping-server.conf"
    try:
        with open(config_file, "r") as f:
            config = toml.load(f)
        db_path = config["DEFAULT"].get(
            "DB_PATH", "/home/biosense/datastore/ping_data.db"
        )
        return db_path
    except Exception as e:
        logging.error(f"Error reading ping-server configuration file: {e}")
        sys.exit(1)


def wireguard_needs_restart(session):
    # Calculate the earliest timestamp for the 24-hour interval to check
    time_threshold = datetime.utcnow() - timedelta(hours=24)

    # Query the database for total pings within the interval
    total_count = (
        session.query(PingData).filter(PingData.timestamp >= time_threshold).count()
    )

    # Query the database for successful pings within the interval
    success_count = (
        session.query(PingData)
        .filter(PingData.timestamp >= time_threshold, PingData.success == True)
        .count()
    )

    return total_count > 0 and success_count == 0


def restart_wireguard():
    try:
        subprocess.run(
            ["sudo", "systemctl", "restart", "wg-quick@biosense"], check=True
        )
        logging.info("WireGuard service restarted successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to restart WireGuard service: {e}")


def main():
    db_path = load_db_path()
    engine = get_engine(db_path)
    session = create_session(engine)()

    # Check for successful pings within the last 24 hours
    if wireguard_needs_restart(session):
        logging.warning(
            "No successful pings detected in the last 24 hours, restarting WireGuard."
        )
        restart_wireguard()
    else:
        logging.info(
            "Successful pings detected within the last 24 hours; no action required."
        )

    # Close the session
    session.close()


if __name__ == "__main__":
    main()
