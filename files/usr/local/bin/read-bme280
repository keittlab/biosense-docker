#!/usr/bin/env python3

import os
import sys
import shutil
import argparse
from time import sleep, strftime
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, Float, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import toml
import board
from adafruit_bme280 import basic as adafruit_bme280
import logging
from logging.handlers import RotatingFileHandler

# Configure logging
log_dir = '/var/log/biosense/'
log_file = os.path.join(log_dir, 'read-bme280.log')

log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

# SQLAlchemy setup
Base = declarative_base()

class BME280Reading(Base):
    __tablename__ = 'bme280_readings'
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    temperature = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    latitude = Column(Float)
    longitude = Column(Float)

def get_engine(db_type, db_path, db_host, db_port, db_name, db_user, db_password):
    if db_type == 'postgresql':
        try:
            return create_engine(f'postgresql+psycopg2://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}')
        except Exception as e:
            logging.error(f"PostgreSQL connection failed: {e}. Falling back to SQLite.")
            return create_engine(f'sqlite:///{db_path}')
    else:
        return create_engine(f'sqlite:///{db_path}')

def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

def initialize_sensor():
    i2c = board.I2C()
    try:
        bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)
        bme280.sea_level_pressure = 1013.25  # Standard atmospheric pressure at sea level in hPa
        return bme280
    except Exception as e:
        logging.error(f"BME280 i2c address could not be found: {e}")
        return None

def get_sensor_data(bme280):
    data = {
        'temp': 'n/a',
        'hum': 'n/a',
        'pres': 'n/a',
    }
    
    if bme280:
        try:
            data['temp'] = bme280.temperature
        except Exception as e:
            logging.error(f"Could not collect temperature data from the BME280: {e}")
        
        try:
            data['hum'] = bme280.relative_humidity
        except Exception as e:
            logging.error(f"Could not collect humidity data from the BME280: {e}")
        
        try:
            data['pres'] = bme280.pressure
        except Exception as e:
            logging.error(f"Could not collect pressure data from the BME280: {e}")
    
    return data

def load_config(config_file):
    try:
        with open(config_file, 'r') as f:
            config = toml.load(f)
        return config
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)

def check_disk_usage(max_usage):
    total, used, free = shutil.disk_usage("/")
    return used / total * 100 > max_usage

def main():
    parser = argparse.ArgumentParser(description="BME280 Sensor Data Recording")
    parser.add_argument('--test-mode', action='store_true', help="Run in test mode")
    args = parser.parse_args()

    config_file = '/etc/biosense/read-bme280.conf'
    config = load_config(config_file)

    interval = config['DEFAULT'].get('INTERVAL', 300)
    db_type = config['DEFAULT'].get('DB_TYPE', 'sqlite')
    db_path = config['DEFAULT'].get('DB_PATH', '/home/biosense/datastore/sensor_data.db')
    db_host = config['DEFAULT'].get('DB_HOST', 'localhost')
    db_port = config['DEFAULT'].get('DB_PORT', 5432)
    db_name = config['DEFAULT'].get('DB_NAME', 'biosense')
    db_user = config['DEFAULT'].get('DB_USER', 'biosense')
    db_password = config['DEFAULT'].get('DB_PASSWORD', 'biosense')
    max_disk_usage = config['DEFAULT'].get('MAX_DISK_USAGE', 90)
    latitude = float(os.getenv('LATITUDE', '0.0'))
    longitude = float(os.getenv('LONGITUDE', '0.0'))

    if args.test_mode:
        logging.info("Running in test mode")
        db_path = '/home/biosense/datastore/test_sensor_data.db'
        db_type = 'sqlite'

    engine = get_engine(db_type, db_path, db_host, db_port, db_name, db_user, db_password)
    session = create_session(engine)

    Base.metadata.create_all(engine)

    bme280 = initialize_sensor()

    logging.info(f"Recording BME280 readings to {db_type} database every {interval} seconds")

    while True:
        if check_disk_usage(max_disk_usage):
            logging.error(f"Disk usage is above {max_disk_usage}%. Stopping recording.")
            sys.exit(1)

        data = get_sensor_data(bme280)
        new_reading = BME280Reading(
            temperature=data['temp'],
            humidity=data['hum'],
            pressure=data['pres'],
            latitude=latitude,
            longitude=longitude
        )
        session.add(new_reading)
        session.commit()
        logging.info(f"Date: {strftime('%Y-%m-%d')}, Time: {strftime('%H:%M:%S')}, Temp: {data['temp']}, Hum: {data['hum']}, Pres: {data['pres']}, Lat: {latitude}, Lon: {longitude}")
        sleep(interval)  # Sleep for the specified interval

if __name__ == "__main__":
    main()
