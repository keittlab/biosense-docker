#!/usr/bin/env python3

import os
import sys
import shutil
from time import sleep, strftime
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, Float, DateTime, String, inspect
from sqlalchemy.orm import declarative_base, sessionmaker
import toml
import board
from adafruit_bme280 import basic as adafruit_bme280
import logging
from logging.handlers import RotatingFileHandler
import signal

# Configure logging
log_dir = '/var/log/biosense/'
log_file = os.path.join(log_dir, 'read-bme280.log')

log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

# SQLAlchemy setup
Base = declarative_base()

class BME280Reading(Base):
    __tablename__ = 'bme280_readings'
    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String)
    latitude = Column(Float)
    longitude = Column(Float)
    timestamp = Column(DateTime, default=datetime.utcnow)
    temperature = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)

def get_engine(db_path):
    return create_engine(f'sqlite:///{db_path}')

def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

def initialize_sensor():
    i2c = board.I2C()
    try:
        bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)
        bme280.sea_level_pressure = 1013.25  # Standard atmospheric pressure at sea level in hPa
        return bme280
    except Exception as e:
        logging.error(f"BME280 i2c address could not be found: {e}")
        return None

def get_sensor_data(bme280):
    data = {
        'temp': 'n/a',
        'hum': 'n/a',
        'pres': 'n/a',
    }
    
    if bme280:
        try:
            data['temp'] = bme280.temperature
        except Exception as e:
            logging.error(f"Could not collect temperature data from the BME280: {e}")
        
        try:
            data['hum'] = bme280.relative_humidity
        except Exception as e:
            logging.error(f"Could not collect humidity data from the BME280: {e}")
        
        try:
            data['pres'] = bme280.pressure
        except Exception as e:
            logging.error(f"Could not collect pressure data from the BME280: {e}")
    
    return data

def load_config(config_file):
    try:
        with open(config_file, 'r') as f:
            config = toml.load(f)
        return config
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)

def validate_database(engine, expected_columns):
    inspector = inspect(engine)
    if 'bme280_readings' in inspector.get_table_names():
        columns = inspector.get_columns('bme280_readings')
        column_names = {column['name'] for column in columns}
        if column_names == expected_columns:
            return True
    return False

def handle_signal(signum, frame):
    logging.info(f"Received signal {signum}, performing cleanup")
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, handle_signal)  # Handle Ctrl+C
    signal.signal(signal.SIGTERM, handle_signal)  # Handle termination signal

    config_file = '/etc/biosense/read-bme280.conf'
    config = load_config(config_file)

    interval = config['DEFAULT'].get('INTERVAL', 300)
    db_path = config['DEFAULT'].get('DB_PATH', '/home/biosense/datastore/sensor_data.db')
    latitude = float(os.getenv('LATITUDE', '0.0'))
    longitude = float(os.getenv('LONGITUDE', '0.0'))
    hostname = os.uname().nodename.replace('-', '_')

    expected_columns = {'id', 'hostname', 'latitude', 'longitude', 'timestamp', 'temperature', 'humidity', 'pressure'}

    engine = get_engine(db_path)
    
    if not validate_database(engine, expected_columns):
        backup_db_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        logging.warning(f"Database schema does not match. Moving existing database to {backup_db_path}")
        shutil.move(db_path, backup_db_path)
        engine = get_engine(db_path)

    session = create_session(engine)
    Base.metadata.create_all(engine)

    bme280 = initialize_sensor()

    logging.info(f"Recording BME280 readings to SQLite database every {interval} seconds")

    while True:
        data = get_sensor_data(bme280)
        new_reading = BME280Reading(
            hostname=hostname,
            latitude=latitude,
            longitude=longitude,
            timestamp=datetime.utcnow(),
            temperature=data['temp'],
            humidity=data['hum'],
            pressure=data['pres']
        )
        session.add(new_reading)
        session.commit()
        logging.info(f"Hostname: {hostname}, Lat: {latitude}, Lon: {longitude}, Timestamp: {strftime('%Y-%m-%d %H:%M:%S')}, Temp: {data['temp']}, Hum: {data['hum']}, Pres: {data['pres']}")
        sleep(interval)  # Sleep for the specified interval

if __name__ == "__main__":
    main()
