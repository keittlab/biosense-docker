#!/usr/bin/env python3

import os
import sys
import shutil
from time import sleep, strftime
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, Float, DateTime, String, inspect
from sqlalchemy.orm import declarative_base, sessionmaker
import toml
import board
import smbus2
from adafruit_bme280 import basic as adafruit_bme280
import logging
from logging.handlers import RotatingFileHandler
import signal

# Configure logging
log_dir = "/var/log/biosense/"
log_file = os.path.join(log_dir, "read-bme280.log")

log_handler = RotatingFileHandler(
    log_file, maxBytes=1 * 1024 * 1024, backupCount=5
)  # 1 MB per file, 5 backup files
logging.basicConfig(
    level=logging.INFO,
    handlers=[log_handler],
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# SQLAlchemy setup
Base = declarative_base()


class BME280Reading(Base):
    __tablename__ = "bme280_readings"
    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String)
    latitude = Column(Float)
    longitude = Column(Float)
    timestamp = Column(DateTime, default=datetime.utcnow)
    address = Column(String)  # Store the sensor's I2C address
    temperature = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)


def get_engine(db_path):
    return create_engine(f"sqlite:///{db_path}")


def create_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()


def initialize_sensors(addresses):
    sensors = []
    for address in addresses:
        try:
            bme280 = adafruit_bme280.Adafruit_BME280_I2C(board.I2C(), address=address)
            bme280.sea_level_pressure = (
                1013.25  # Standard atmospheric pressure at sea level in hPa
            )
            sensors.append((address, bme280))
            logging.info(f"Initialized BME280 sensor at I2C address: {hex(address)}")
        except Exception as e:
            logging.warning(
                f"Failed to initialize BME280 at address {hex(address)}: {e}"
            )

    if not sensors:
        logging.error("No BME280 sensors detected on the I2C bus.")

    return sensors


def get_sensor_data(bme280):
    data = {"temp": "n/a", "hum": "n/a", "pres": "n/a"}
    if bme280:
        try:
            data["temp"] = bme280.temperature
        except Exception as e:
            logging.error(f"Could not collect temperature data from the BME280: {e}")

        try:
            data["hum"] = bme280.relative_humidity
        except Exception as e:
            logging.error(f"Could not collect humidity data from the BME280: {e}")

        try:
            data["pres"] = bme280.pressure
        except Exception as e:
            logging.error(f"Could not collect pressure data from the BME280: {e}")

    return data


def load_config(config_file):
    try:
        with open(config_file, "r") as f:
            config = toml.load(f)
        return config
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)


def load_location(location_file):
    """Load latitude and longitude from the specified location file."""
    if not os.path.exists(location_file):
        logging.error(f"Location file {location_file} does not exist.")
        sys.exit(1)
    try:
        with open(location_file, "r") as f:
            location = toml.load(f)
        latitude = location.get("latitude")
        longitude = location.get("longitude")
        if latitude is None or longitude is None:
            raise ValueError("Missing latitude or longitude in location file.")
        return float(latitude), float(longitude)
    except Exception as e:
        logging.error(f"Error reading location file: {e}")
        sys.exit(1)


def validate_database(engine, expected_columns):
    inspector = inspect(engine)
    if "bme280_readings" in inspector.get_table_names():
        columns = inspector.get_columns("bme280_readings")
        column_names = {column["name"] for column in columns}
        if column_names == expected_columns:
            return True
    return False


def handle_signal(signum, frame):
    logging.info(f"Received signal {signum}, performing cleanup")
    sys.exit(0)


def main():
    signal.signal(signal.SIGINT, handle_signal)  # Handle Ctrl+C
    signal.signal(signal.SIGTERM, handle_signal)  # Handle termination signal

    config_file = "/etc/biosense/read-bme280.conf"
    location_file = "/etc/biosense/location.conf"
    config = load_config(config_file)

    interval = config["DEFAULT"].get("INTERVAL", 300)
    db_path = config["DEFAULT"].get(
        "DB_PATH", "/home/biosense/datastore/sensor_data.db"
    )
    addresses = config["DEFAULT"].get("ADDRESSES", [0x76, 0x77])

    # Load latitude and longitude from the location file
    latitude, longitude = load_location(location_file)

    hostname = os.uname().nodename.replace("-", "_")

    expected_columns = {
        "id",
        "hostname",
        "latitude",
        "longitude",
        "timestamp",
        "address",
        "temperature",
        "humidity",
        "pressure",
    }

    # Check if the database exists before attempting validation
    if os.path.exists(db_path):
        engine = get_engine(db_path)
        if not validate_database(engine, expected_columns):
            # If the database exists but schema does not match, create a backup
            backup_db_path = (
                f"{db_path}.backup_{datetime.now().strftime('%Y%m%d%H%M%S')}"
            )
            logging.warning(
                f"Database schema does not match. Moving existing database to {backup_db_path}"
            )
            shutil.move(db_path, backup_db_path)
            engine = get_engine(db_path)  # Re-initialize engine for the new database
    else:
        # If the database does not exist, initialize it without creating a backup
        logging.info("Database file not found. Creating a new database.")
        engine = get_engine(db_path)

    session = create_session(engine)
    Base.metadata.create_all(engine)  # Create tables if not present

    sensors = initialize_sensors(addresses)

    if not sensors:
        logging.error("No sensors initialized. Exiting.")
        sys.exit(1)

    logging.info(
        f"Recording BME280 readings from {len(sensors)} sensors to SQLite database every {interval} seconds"
    )

    while True:
        for address, bme280 in sensors:
            data = get_sensor_data(bme280)
            new_reading = BME280Reading(
                hostname=hostname,
                latitude=latitude,
                longitude=longitude,
                timestamp=datetime.utcnow(),
                address=hex(address),  # Store the I2C address
                temperature=data["temp"],
                humidity=data["hum"],
                pressure=data["pres"],
            )
            session.add(new_reading)
            session.commit()
            logging.info(
                f"Sensor at {hex(address)} - Hostname: {hostname}, Lat: {latitude}, Lon: {longitude}, "
                f"Timestamp: {strftime('%Y-%m-%d %H:%M:%S')}, Temp: {data['temp']}, Hum: {data['hum']}, Pres: {data['pres']}"
            )
        sleep(interval)  # Sleep for the specified interval


if __name__ == "__main__":
    main()
