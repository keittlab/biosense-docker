#!/usr/bin/env python3

import os
import struct
import time
import toml
import shutil
import gpiod
from smbus2 import SMBus
from subprocess import call
from logging.handlers import RotatingFileHandler
import logging

# Configure logging
log_dir = '/var/log/'
log_file = os.path.join(log_dir, 'ups-monitor.log')

# Set up logging
log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

def readVoltage(bus, address):
    try:
        read = bus.read_word_data(address, 2)
        swapped = struct.unpack("<H", struct.pack(">H", read))[0]
        voltage = swapped * 1.25 / 1000 / 16
        return voltage
    except Exception as e:
        logging.error(f"Error reading voltage: {e}")
        return None

def readCapacity(bus, address):
    try:
        read = bus.read_word_data(address, 4)
        swapped = struct.unpack("<H", struct.pack(">H", read))[0]
        capacity = swapped / 256
        return capacity
    except Exception as e:
        logging.error(f"Error reading capacity: {e}")
        return None

def get_battery_status(voltage):
    if voltage > 3.78:
        return "Full"
    elif 3.7 <= voltage <= 3.78:
        return "High"
    elif 3.55 <= voltage < 3.7:
        return "Medium"
    elif 3.4 <= voltage < 3.55:
        return "Low"
    elif voltage < 3.4:
        return "Critical"
    else:
        return "Unknown"

def load_config(config_file):
    try:
        config = toml.load(config_file)
        if not config:
            raise Exception("Configuration file is empty or not found.")
        return config
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        exit(1)

def main():
    config_file = '/etc/biosense/ups-monitor.conf'
    config = load_config(config_file)
    logging.info("Configuration file loaded")

    try:
        shutdown_threshold = config['DEFAULT'].get('SHUTDOWN_THRESHOLD', 3)
        pld_pin = config['DEFAULT'].get('PLD_PIN', 6)
        battery_low_threshold = config['DEFAULT'].get('BATTERY_LOW_THRESHOLD', 20)
        voltage_threshold = config['DEFAULT'].get('VOLTAGE_THRESHOLD', 3.20)
        check_interval = config['DEFAULT'].get('CHECK_INTERVAL', 60)
        shutdown_delay = config['DEFAULT'].get('SHUTDOWN_DELAY', 1)
        bus_number = config['DEFAULT'].get('BUS', 1)
        address = int(config['DEFAULT'].get('ADDRESS', "0x36"), 16)
        loop = config['DEFAULT'].get('LOOP', True)

        # BirdNET parameters
        run_birdnet_capacity_resume = config['DEFAULT'].get('BIRDN_BATTERY_CAPACITY_RESUME', 30)
        run_birdnet_voltage_resume = config['DEFAULT'].get('BIRDN_VOLTAGE_RESUME', 3.50)
        run_birdnet_capacity_stop = config['DEFAULT'].get('BIRDN_BATTERY_CAPACITY_STOP', 15)
        run_birdnet_voltage_stop = config['DEFAULT'].get('BIRDN_VOLTAGE_STOP', 3.30)
    except Exception as e:
        logging.error(f"Error parsing configuration: {e}")
        exit(1)

    shutdown_initiated = False

    try:
        bus = SMBus(bus_number)
        logging.info("SMBus initialized")
        chip = gpiod.Chip('gpiochip4')
        logging.info("GPIO chip accessed")
        pld_line = chip.get_line(pld_pin)
        pld_line.request(consumer="PLD", type=gpiod.LINE_REQ_DIR_IN)
        logging.info("GPIO line requested")

        while True:
            failure_counter = 0

            while failure_counter < shutdown_threshold:
                try:
                    ac_power_state = pld_line.get_value()
                    voltage = readVoltage(bus, address)
                    battery_status = get_battery_status(voltage)
                    capacity = readCapacity(bus, address)
                    logging.info(f"Capacity: {capacity:.2f}% ({battery_status}), AC Power State: {'Plugged in' if ac_power_state == 1 else 'Unplugged'}, Voltage: {voltage:.2f}V")

                    if ac_power_state == 1:
                        if shutdown_initiated:
                            call("sudo shutdown -c", shell=True)
                            shutdown_initiated = False
                            logging.info("Shutdown canceled due to AC power restored.")
                        failure_counter = 0
                        # Check conditions to resume BirdNET service
                        if capacity > run_birdnet_capacity_resume and voltage > run_birdnet_voltage_resume:
                            call("systemctl start run-birdnet", shell=True)
                            logging.info("BirdNET service resumed")
                    else:
                        # Check conditions to stop BirdNET service
                        if capacity < run_birdnet_capacity_stop or voltage < run_birdnet_voltage_stop:
                            call("systemctl stop run-birdnet", shell=True)
                            logging.info("BirdNET service stopped")
                        failure_counter += 1

                    if failure_counter < shutdown_threshold:
                        time.sleep(check_interval)
                    else:
                        break
                except Exception as e:
                    logging.error(f"Error during monitoring loop: {e}")

            if failure_counter >= shutdown_threshold and not shutdown_initiated:
                shutdown_reason = ""
                if capacity < battery_low_threshold:
                    shutdown_reason = "due to critical battery level."
                elif voltage < voltage_threshold:
                    shutdown_reason = "due to critical battery voltage."

                shutdown_message = f"Critical condition met {shutdown_reason} Initiating shutdown."
                logging.error(shutdown_message)
                call(f"nohup shutdown -h +{shutdown_delay} '{shutdown_message}' > /dev/null 2>&1", shell=True)
                shutdown_initiated = True

            if not loop:
                break
            time.sleep(check_interval)
    finally:
        exit(0)

if __name__ == "__main__":
    main()
