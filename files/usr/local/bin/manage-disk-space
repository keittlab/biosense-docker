#!/usr/bin/env python3

import os
import logging
from logging.handlers import RotatingFileHandler
import shutil
import time
import random
import subprocess
import sqlite3
import toml
import sys

# Load configuration
config = toml.load('/etc/biosense/manage-disk-space.conf')

# Configure logging
log_dir = '/var/log/biosense/'
log_file = os.path.join(log_dir, 'manage-disk-space.log')
log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Thresholds for disk usage
DISK_USAGE_WARNING_THRESHOLD = config['thresholds']['warning']
DISK_USAGE_CLEANUP_THRESHOLD = config['thresholds']['cleanup']
DISK_USAGE_STOP_SERVICES_THRESHOLD = config['thresholds']['stop_services']
DISK_USAGE_STOP_CLEANUP_THRESHOLD = config['thresholds']['stop_cleanup']

# Services to manage
SERVICES = config['services']['list']

# Database path
DB_PATH = config['database']['path']

def check_disk_usage(path):
    total, used, free = shutil.disk_usage(path)
    percent_used = (used / total) * 100
    logging.info(f"Disk usage for {path}: {percent_used:.2f}% used")
    return percent_used

def database_exists_and_has_schema(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(birdnet_detections)")
        columns = cursor.fetchall()
        return len(columns) > 0
    except Exception as e:
        logging.error(f"Error checking database schema: {e}")
        return False

def delete_random_recording_from_db():
    if not os.path.isfile(DB_PATH):
        logging.warning(f"Database file not found: {DB_PATH}. Skipping deletion.")
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        if not database_exists_and_has_schema(conn):
            logging.warning("Database does not have the expected schema. Skipping deletion.")
            conn.close()
            return

        cursor = conn.cursor()

        # Get a random source_recording
        cursor.execute("SELECT DISTINCT source_recording FROM birdnet_detections WHERE source_recording IS NOT NULL")
        source_recordings = cursor.fetchall()

        if not source_recordings:
            logging.warning("No source recordings found in database.")
            conn.close()
            return

        source_recording_to_delete = random.choice(source_recordings)[0]

        # Update all entries with the selected source_recording
        cursor.execute("UPDATE birdnet_detections SET source_recording = NULL WHERE source_recording = ?", (source_recording_to_delete,))
        conn.commit()
        logging.debug(f"Updated database: set source_recording to NULL for source_recording: {source_recording_to_delete}")

        # Remove the associated file if it exists
        if os.path.isfile(source_recording_to_delete):
            os.remove(source_recording_to_delete)
            logging.info(f"Deleted source recording file: {source_recording_to_delete}")
        else:
            logging.warning(f"Source recording file to delete not found: {source_recording_to_delete}")

        conn.close()
    except Exception as e:
        logging.error(f"Error handling database and file deletion: {e}")

def stop_services():
    for service in SERVICES:
        try:
            subprocess.run(['sudo', 'systemctl', 'stop', service], check=True)
            logging.info(f"Stopped service: {service}")
        except subprocess.CalledProcessError as e:
            logging.error(f"Error stopping service {service}: {e}")

def start_services():
    for service in SERVICES:
        try:
            subprocess.run(['sudo', 'systemctl', 'start', service], check=True)
            logging.info(f"Started service: {service}")
        except subprocess.CalledProcessError as e:
            logging.error(f"Error starting service {service}: {e}")

def main():
    path_to_monitor = '/home/biosense'
    services_stopped = False

    # Log when the script starts
    logging.info("Script started.")

    try:
        while True:
            percent_used = check_disk_usage(path_to_monitor)
            
            if percent_used > DISK_USAGE_WARNING_THRESHOLD:
                logging.warning(f"Disk usage for {path_to_monitor} exceeded warning threshold: {percent_used:.2f}% used")
            
            if percent_used > DISK_USAGE_STOP_SERVICES_THRESHOLD and not services_stopped:
                logging.warning(f"Disk usage for {path_to_monitor} exceeded stop services threshold: {percent_used:.2f}% used")
                stop_services()
                services_stopped = True
            
            if percent_used > DISK_USAGE_CLEANUP_THRESHOLD:
                logging.warning(f"Disk usage for {path_to_monitor} exceeded cleanup threshold: {percent_used:.2f}% used")
                delete_random_recording_from_db()
                percent_used = check_disk_usage(path_to_monitor)
                while percent_used > DISK_USAGE_STOP_CLEANUP_THRESHOLD:
                    delete_random_recording_from_db()
                    percent_used = check_disk_usage(path_to_monitor)
                    time.sleep(1)  # Short delay to allow the system to update disk usage
            
            if services_stopped and percent_used < DISK_USAGE_STOP_CLEANUP_THRESHOLD:
                logging.info(f"Disk usage for {path_to_monitor} below start services threshold: {percent_used:.2f}% used")
                start_services()
                services_stopped = False

            time.sleep(600)  # Check every 10 minutes

    except KeyboardInterrupt:
        logging.info("Script interrupted and stopped.")
    except Exception as e:
        logging.error(f"Script encountered an error: {e}")
    finally:
        logging.info("Script stopped.")

if __name__ == "__main__":
    main()
