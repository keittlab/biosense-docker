#!/usr/bin/env python3

import os
import shutil
import signal
import sys
import toml
import logging
import time
from logging.handlers import RotatingFileHandler
from subprocess import Popen, PIPE
from datetime import datetime
import re

# Configure logging
log_dir = "/var/log/biosense/"
log_file = os.path.join(log_dir, "record-sound.log")
log_handler = RotatingFileHandler(
    log_file, maxBytes=1 * 1024 * 1024, backupCount=5
)  # 1 MB per file, 5 backup files
logging.basicConfig(
    level=logging.INFO,
    handlers=[log_handler],
    format="%(asctime)s - %(levelname)s - %(message)s",
)


def read_config(config_file):
    """Load configuration file."""
    try:
        if not os.path.exists(config_file):
            raise FileNotFoundError(f"Configuration file does not exist: {config_file}")

        logging.info(f"Reading configuration file: {config_file}")
        with open(config_file, "r") as f:
            content = toml.load(f)

        if not content:
            raise ValueError("Configuration file is empty.")

        return content["DEFAULT"]
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)


def load_location(location_file):
    """Load latitude and longitude from the location file."""
    try:
        if not os.path.exists(location_file):
            raise FileNotFoundError(f"Location file does not exist: {location_file}")

        with open(location_file, "r") as f:
            location = toml.load(f)

        latitude = location.get("latitude")
        longitude = location.get("longitude")
        if latitude is None or longitude is None:
            raise ValueError("Latitude or longitude is missing in the location file.")

        return float(latitude), float(longitude)
    except Exception as e:
        logging.error(f"Error reading location file: {e}")
        sys.exit(1)


def get_hostname():
    hostname = os.uname().nodename
    return hostname.replace("-", "_")


def get_hw_params():
    """Detect the hardware ID of the audio device."""
    try:
        process = Popen(["arecord", "-l"], stdout=PIPE, stderr=PIPE, text=True)
        stdout, stderr = process.communicate()
        logging.info(f"arecord -l output: {stdout}")

        if process.returncode != 0:
            logging.error(f"Error in arecord -l: {stderr}")
            return None

        match = re.search(r"card (\d+):.*device (\d+):", stdout)
        if match:
            card = match.group(1)
            device = match.group(2)
            hw_id = f"hw:{card},{device}"
            logging.info(f"Detected hardware ID: {hw_id}")
            return hw_id
        else:
            logging.error("No capture device found.")
            return None
    except Exception as e:
        logging.error(f"Error detecting hardware: {e}")
        return None


def start_recording(latitude, longitude):
    """Start the recording process."""
    lat_direction = "N" if latitude >= 0 else "S"
    lon_direction = "E" if longitude >= 0 else "W"
    latitude = abs(latitude)
    longitude = abs(longitude)
    lat_str = f"{latitude:.6f}".replace(".", "_")
    lon_str = f"{longitude:.6f}".replace(".", "_")
    formatted_lat_lon = f"{lat_str}{lat_direction}_{lon_str}{lon_direction}"

    hostname = get_hostname()
    hw_id = get_hw_params()
    if hw_id is None:
        logging.error("Unable to detect hardware. Exiting.")
        sys.exit(1)

    # Get timestamp and file pattern
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_pattern = os.path.join(
        RECORDING_DIR, f"arecord_{hostname}_{formatted_lat_lon}_{timestamp}.wav"
    )

    # Start the recording process
    arecord_command = [
        "arecord",
        "-D",
        hw_id,
        "-f",
        DEFAULT_FORMAT,
        f"-c{DEFAULT_CHANNELS}",
        f"-r{RATE}",
        "-t",
        "wav",
        "--max-file-time",
        str(RECORDING_DURATION_MINUTES * 60),
        file_pattern,
    ]
    logging.info(f"Starting recording with command: {' '.join(arecord_command)}")
    process = Popen(arecord_command, stdout=PIPE, stderr=PIPE, text=True)

    def signal_handler(sig, frame):
        logging.info("Terminating recording process.")
        process.terminate()
        process.wait()
        logging.info("Recording process terminated.")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    while True:
        time.sleep(SLEEP_INTERVAL_SECONDS)
        if process.poll() is not None:
            if process.returncode != 0:
                stderr = process.stderr.read()
                logging.error(
                    f"'arecord' failed with return code {process.returncode}: {stderr}"
                )
                sys.exit(1)
            else:
                logging.info("Recording completed successfully.")
                break


def main():
    # Load configurations
    config_file = "/etc/biosense/record-sound.conf"
    location_file = "/etc/biosense/location.conf"
    config = read_config(config_file)

    global RECORDING_DIR, RECORDING_DURATION_MINUTES, SLEEP_INTERVAL_SECONDS
    global RATE, DEFAULT_FORMAT, DEFAULT_CHANNELS

    RECORDING_DIR = config.get(
        "RECORDING_DIR", "/home/biosense/datastore/sound_recordings/"
    )
    RECORDING_DURATION_MINUTES = int(config.get("RECORDING_DURATION_MINUTES", 15))
    SLEEP_INTERVAL_SECONDS = int(config.get("SLEEP_INTERVAL_SECONDS", 5))
    RATE = int(config.get("RATE", 48000))
    DEFAULT_FORMAT = config.get("DEFAULT_FORMAT", "S24_3LE")
    DEFAULT_CHANNELS = int(config.get("DEFAULT_CHANNELS", 2))

    latitude, longitude = load_location(location_file)

    if not os.path.exists(RECORDING_DIR):
        os.makedirs(RECORDING_DIR)
        logging.info(f"Created recording directory: {RECORDING_DIR}")

    start_recording(latitude, longitude)


if __name__ == "__main__":
    main()
