#!/usr/bin/env python3

import os
import shutil
import signal
import sys
import toml
import logging
import time
from logging.handlers import RotatingFileHandler
from subprocess import Popen, PIPE
from datetime import datetime

# Configure logging
log_dir = '/var/log/biosense/'
log_file = os.path.join(log_dir, 'record-sound.log')
log_handler = RotatingFileHandler(log_file, maxBytes=1*1024*1024, backupCount=5)  # 1 MB per file, 5 backup files
logging.basicConfig(level=logging.INFO, handlers=[log_handler],
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Function to read configuration with error handling
def read_config(config_file):
    try:
        if not os.path.exists(config_file):
            raise Exception(f"Configuration file does not exist: {config_file}")

        logging.info(f"Reading configuration file: {config_file}")
        with open(config_file, 'r') as f:
            content = toml.load(f)
        
        if not content:
            raise Exception("Configuration file is empty or not found.")
        
        return content['DEFAULT']
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)

# Read configuration
config_file = '/etc/biosense/record-sound.conf'
config = read_config(config_file)

RECORDING_DIR = config.get('RECORDING_DIR', '/home/biosense/datastore/sound_recordings/')
RECORDING_DURATION_MINUTES = int(config.get('RECORDING_DURATION_MINUTES', 15))  # Minutes
CHANNELS = int(config.get('CHANNELS', 1))  # 1 for mono, 2 for stereo
SLEEP_INTERVAL_SECONDS = int(config.get('SLEEP_INTERVAL_SECONDS', 5))  # Sleep interval in seconds

def get_hostname():
    hostname = os.uname().nodename
    return hostname.replace('-', '_')

def start_recording():
    try:
        latitude = float(os.getenv('LATITUDE', '0'))
        longitude = float(os.getenv('LONGITUDE', '0'))
    except ValueError:
        logging.error("Invalid latitude or longitude values. Using default (0, 0).")
        latitude = 0
        longitude = 0

    lat_direction = 'N' if latitude >= 0 else 'S'
    lon_direction = 'E' if longitude >= 0 else 'W'
    latitude = abs(latitude)
    longitude = abs(longitude)
    lat_str = f"{latitude:.6f}".replace('.', '_')
    lon_str = f"{longitude:.6f}".replace('.', '_')
    formatted_lat_lon = f"{lat_str}{lat_direction}_{lon_str}{lon_direction}"

    hostname = get_hostname()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_pattern = os.path.join(RECORDING_DIR, f'arecord_{hostname}_{formatted_lat_lon}_{timestamp}.wav')
    arecord_command = [
        "arecord", "-f", "S16_LE", f"-c{CHANNELS}", "-r48000", "-t", "wav",
        "--max-file-time", str(RECORDING_DURATION_MINUTES * 60), file_pattern  # Convert minutes to seconds
    ]
    logging.info(f"Starting recording with command: {' '.join(arecord_command)}")
    process = Popen(arecord_command, stdout=PIPE, stderr=PIPE)

    def signal_handler(sig, frame):
        logging.info("Terminating recording process.")
        process.terminate()
        process.wait()
        logging.info("Recording process terminated.")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    while process.poll() is None:
        time.sleep(SLEEP_INTERVAL_SECONDS)

def main():
    if not os.path.exists(RECORDING_DIR):
        os.makedirs(RECORDING_DIR)
        logging.info(f"Created recording directory: {RECORDING_DIR}")

    start_recording()

if __name__ == "__main__":
    main()
