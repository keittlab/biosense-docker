#!/bin/bash

# Default values
IMAGE_SOURCE_DIR="source_images"
IMAGE_DEST_DIR="customized_images"
OVERWRITE=0
DEBUG=0
DISABLE_WIFI=0
DISABLE_BLUETOOTH=0
DISABLE_TRIGGERHAPPY=0
DISABLE_SSH_PASSWORDS=0
NO_BOOT_SCRIPTS=0 # New variable for --no-boot-scripts
WIFI_SSID=""
WIFI_PASSWORD=""
WG_IP=""
WIFI_COUNTRY="US"
LATITUDE="30.266666"
LONGITUDE="-97.733330"
CONFIG_FILE=""
SAVE_CONFIG_FILE=""
UPDATE_CONFIG=0
WAIT_TIMESYNC=0
APN="" # Default APN is empty

# Function to display usage information
usage() {
    echo "Usage: $0 --wg-ip <wg_ip> [options]"
    echo "Options:"
    echo "  --wg-ip <wg_ip>                : Set the WireGuard IP for the customized image."
    echo "  --source-dir <dir>             : Specify the source images directory (default: source_images)."
    echo "  --dest-dir <dir>               : Specify the destination images directory (default: customized_images)."
    echo "  --image-file <file>            : Path to the source image file."
    echo "  --overwrite                    : Overwrite the customized image file if it exists."
    echo "  --debug                        : Run sdm without --batch option."
    echo "  --config-file <file>           : Specify a YAML configuration file."
    echo "  --save-config <file>           : Save current settings to a YAML file."
    echo "  --update-config                : Update the specified configuration file."
    echo "  --disable-wifi                 : Disable WiFi in the customized image."
    echo "  --disable-bluetooth            : Disable Bluetooth in the customized image."
    echo "  --disable-triggerhappy         : Disable Triggerhappy in the customized image."
    echo "  --disable-ssh-passwords        : Disable SSH passwords in the customized image."
    echo "  --wifi-ssid <ssid>             : Specify the WiFi SSID."
    echo "  --wifi-password <password>     : Specify the WiFi password."
    echo "  --wifi-country <country>       : Specify the WiFi country setting (default: US)."
    echo "  --latitude <latitude>          : Specify the latitude."
    echo "  --longitude <longitude>        : Specify the longitude."
    echo "  --wait-timesync                : Wait for time synchronization."
    echo "  --apn <apn>                    : Specify the APN for the cellular network (default: empty)."
    echo "  --sim-ip <ip_address>          : Specify a static IP for the cellular network."
    echo "  --sim-gateway <gateway_ip>     : Specify the gateway for the static IP configuration."
    echo "  --no-boot-scripts              : Omit --bootscripts from the sdm command."
    exit 1
}

# Function to find the latest image file in the source directory
find_latest_image() {
    latest_image=$(ls -t "${IMAGE_SOURCE_DIR}"/*.img | head -n 1)
    echo "$(basename "$latest_image")"
}

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --wg-ip)
        WG_IP=$2
        shift 2
        ;;
    --source-dir)
        IMAGE_SOURCE_DIR=$2
        shift 2
        ;;
    --dest-dir)
        IMAGE_DEST_DIR=$2
        shift 2
        ;;
    --image-file)
        IMAGE_FILE=$(basename "$2")
        shift 2
        ;;
    --config-file)
        CONFIG_FILE=$2
        shift 2
        ;;
    --save-config)
        SAVE_CONFIG_FILE=$2
        shift 2
        ;;
    --update-config)
        UPDATE_CONFIG=1
        shift 1
        ;;
    --overwrite)
        OVERWRITE=1
        shift 1
        ;;
    --debug)
        DEBUG=1
        shift 1
        ;;
    --disable-wifi)
        DISABLE_WIFI=1
        shift 1
        ;;
    --disable-bluetooth)
        DISABLE_BLUETOOTH=1
        shift 1
        ;;
    --disable-triggerhappy)
        DISABLE_TRIGGERHAPPY=1
        shift 1
        ;;
    --disable-ssh-passwords)
        DISABLE_SSH_PASSWORDS=1
        shift 1
        ;;
    --wifi-ssid)
        WIFI_SSID=$2
        shift 2
        ;;
    --wifi-password)
        WIFI_PASSWORD=$2
        shift 2
        ;;
    --wifi-country)
        WIFI_COUNTRY=$2
        shift 2
        ;;
    --latitude)
        LATITUDE=$2
        shift 2
        ;;
    --longitude)
        LONGITUDE=$2
        shift 2
        ;;
    --wait-timesync)
        WAIT_TIMESYNC=1
        shift 1
        ;;
    --apn)
        APN=$2
        shift 2
        ;;
    --sim-ip)
        STATIC_IP=$2
        shift 2
        ;;
    --sim-gateway)
        GATEWAY=$2
        shift 2
        ;;
    --no-boot-scripts) # New argument for --no-boot-scripts
        NO_BOOT_SCRIPTS=1
        shift 1
        ;;
    *)
        echo "Invalid option: $1" 1>&2
        usage
        ;;
    esac
done

# Validate input parameters
if [[ -z "${WG_IP}" ]]; then
    echo "WireGuard IP is required."
    usage
fi

if [[ -z "${IMAGE_FILE}" ]]; then
    IMAGE_FILE=$(find_latest_image)
    echo "No image file specified. Using the latest image file: ${IMAGE_FILE}"
fi

# Add '10.123.' prefix if not included in WG_IP
if [[ "${WG_IP}" != 10.123.* ]]; then
    WG_IP="10.123.${WG_IP}"
fi

# Generate hostname from WireGuard IP
IFS='.' read -r -a ip_parts <<<"${WG_IP}"
if [[ ${#ip_parts[@]} -eq 4 ]]; then
    HOSTNAME="biosense-${ip_parts[2]}-${ip_parts[3]}"
else
    echo "Invalid WireGuard IP format."
    exit 1
fi

# Check if the image file exists
if [[ ! -f "${IMAGE_SOURCE_DIR}/${IMAGE_FILE}" ]]; then
    echo "Image file does not exist."
    exit 1
fi

echo ""
echo "Using image file: ${IMAGE_SOURCE_DIR}/${IMAGE_FILE}"
echo "Generated hostname: ${HOSTNAME}"
echo ""

IMAGE_FILE_BASE=$(basename "${IMAGE_FILE}")
CUSTOMIZED_IMAGE_FILE="${IMAGE_DEST_DIR}/${HOSTNAME}-${IMAGE_FILE_BASE}"

echo "Writing to ${CUSTOMIZED_IMAGE_FILE}"
echo ""

CONTAINER_IMAGE_FILE="/home/agent/hostdir/${IMAGE_SOURCE_DIR}/${IMAGE_FILE_BASE}"
CONTAINER_CUSTOMIZED_IMAGE_FILE="/home/agent/hostdir/${CUSTOMIZED_IMAGE_FILE}"

# Check if the customized image file exists
if [[ -f "${CUSTOMIZED_IMAGE_FILE}" && ${OVERWRITE} -eq 0 ]]; then
    echo "Output image file already exists and overwrite option not set. Exiting."
    exit 1
else
    if [[ ${OVERWRITE} -eq 1 ]]; then
        echo "Overwriting ${CUSTOMIZED_IMAGE_FILE}"
        rm -f "${CUSTOMIZED_IMAGE_FILE}"
    fi
fi

cp -a -f "${IMAGE_SOURCE_DIR}/${IMAGE_FILE}" "${CUSTOMIZED_IMAGE_FILE}"

DOCKER_IMAGE_NAME="biosense-sdm"
docker build -t "${DOCKER_IMAGE_NAME}" .

SDM_COMMAND="sudo sdm --customize --extend --xmb 2048"
if [[ ${DEBUG} -eq 0 ]]; then
    SDM_COMMAND="${SDM_COMMAND} --batch"
fi

# Add the --bootscripts argument unless --no-boot-scripts was provided
if [[ ${NO_BOOT_SCRIPTS} -eq 0 ]]; then
    SDM_COMMAND="${SDM_COMMAND} --bootscripts"
fi

# Construct the disables plugin string
DISABLES=""
if [[ ${DISABLE_WIFI} -eq 1 ]]; then
    DISABLES="wifi|${DISABLES}"
fi
if [[ ${DISABLE_BLUETOOTH} -eq 1 ]]; then
    DISABLES="bluetooth|${DISABLES}"
fi
if [[ ${DISABLE_TRIGGERHAPPY} -eq 1 ]]; then
    DISABLES="triggerhappy|${DISABLES}"
fi
DISABLES="piwiz|${DISABLES}"

# Add the necessary plugins to the sdm command
PLUGIN_ARGS="wg_ip=${WG_IP}|latitude=${LATITUDE}|longitude=${LONGITUDE}"
[ -n "${WIFI_SSID}" ] && PLUGIN_ARGS="${PLUGIN_ARGS}|wifissid=${WIFI_SSID}"
[ -n "${WIFI_PASSWORD}" ] && PLUGIN_ARGS="${PLUGIN_ARGS}|wifipassword=${WIFI_PASSWORD}"
[ -n "${APN}" ] && PLUGIN_ARGS="${PLUGIN_ARGS}|apn=${APN}"                    # Add APN if provided
[ -n "${STATIC_IP}" ] && PLUGIN_ARGS="${PLUGIN_ARGS}|ip_address=${STATIC_IP}" # Add IP address if provided
[ -n "${GATEWAY}" ] && PLUGIN_ARGS="${PLUGIN_ARGS}|gateway=${GATEWAY}"        # Add Gateway if provided

# Remove trailing '|' and add PLUGIN_ARGS to SDM_COMMAND
if [[ -n "${PLUGIN_ARGS}" ]]; then
    PLUGIN_ARGS="${PLUGIN_ARGS%|}" # Remove trailing '|'
    SDM_COMMAND="${SDM_COMMAND} --plugin @/home/agent/hostdir/sdm-plugin-commands --plugin /home/agent/hostdir/customize-image-plugin:\"${PLUGIN_ARGS}\""
fi

# Add network plugin if WiFi details are specified
NETWORK_PLUGIN_ARGS=""
[ -n "${WIFI_SSID}" ] && NETWORK_PLUGIN_ARGS="${NETWORK_PLUGIN_ARGS}wifissid=${WIFI_SSID}|"
[ -n "${WIFI_PASSWORD}" ] && NETWORK_PLUGIN_ARGS="${NETWORK_PLUGIN_ARGS}wifipassword=${WIFI_PASSWORD}|"
[ -n "${WIFI_COUNTRY}" ] && NETWORK_PLUGIN_ARGS="${NETWORK_PLUGIN_ARGS}wificountry=${WIFI_COUNTRY}|"
if [[ -n "${NETWORK_PLUGIN_ARGS}" ]]; then
    NETWORK_PLUGIN_ARGS="${NETWORK_PLUGIN_ARGS%|}" # Remove trailing '|'
    SDM_COMMAND="${SDM_COMMAND} --plugin network:\"${NETWORK_PLUGIN_ARGS}|noipv6\""
fi

if [[ -n "${DISABLES}" ]]; then
    SDM_COMMAND="${SDM_COMMAND} --plugin disables:\"${DISABLES%|}\""
fi

if [[ ${WAIT_TIMESYNC} -eq 0 ]]; then
    SDM_COMMAND="${SDM_COMMAND} --nowait-timesync"
fi

# Add hostname to the sdm command
SDM_COMMAND="${SDM_COMMAND} --hostname ${HOSTNAME}"

SDM_COMMAND="${SDM_COMMAND} \
    --chroot \
    /home/agent/hostdir/${CUSTOMIZED_IMAGE_FILE}"

docker run --privileged -it --rm -v "$(pwd)":/home/agent/hostdir -v /dev:/dev "${DOCKER_IMAGE_NAME}" /bin/bash -c "${SDM_COMMAND}"

# Save the current configuration to a file if requested
if [[ -n "${SAVE_CONFIG_FILE}" ]]; then
    if ! command -v yq &>/dev/null; then
        echo "Error: yq is not installed. Please install yq to use the --save-config option."
        exit 1
    fi

    save_yaml "${SAVE_CONFIG_FILE}"
    echo "Current configuration saved to ${SAVE_CONFIG_FILE}"
fi

# Update the specified configuration file if requested
if [[ ${UPDATE_CONFIG} -eq 1 && -n "${CONFIG_FILE}" ]]; then
    if ! command -v yq &>/dev/null; then
        echo "Error: yq is not installed. Please install yq to use the --update-config option."
        exit 1
    fi

    save_yaml "${CONFIG_FILE}"
    echo "Configuration file ${CONFIG_FILE} updated with current settings"
fi

exit 0
