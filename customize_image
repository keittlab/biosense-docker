#!/bin/bash

IMAGE_SOURCE_DIR="source_images"
IMAGE_DEST_DIR="customized_images"
OVERWRITE=0
DISABLE_WIFI=0
DISABLE_BLUETOOTH=0
DISABLE_TRIGGERHAPPY=0
DEBUG=0
APTCACHE=""
HOSTNAME=""
AUTOLOGIN=0

# Function to display usage information
usage() {
    echo "Usage: $0 -f <image_file> [--hostname <hostname>] [--autologin] [--overwrite] [--disable-wifi] [--disable-bluetooth] [--disable-triggerhappy] [--debug] [--aptcache <cache_address>]"
    echo "  -f <image_file>           : Path to the source image file."
    echo "  --hostname <hostname>     : Set the hostname for the customized image."
    echo "  --autologin               : Enable autologin for the customized image."
    echo "  --overwrite               : Overwrite the customized image file if it exists."
    echo "  --disable-wifi            : Disable WiFi in the customized image."
    echo "  --disable-bluetooth       : Disable Bluetooth in the customized image."
    echo "  --disable-triggerhappy    : Disable Triggerhappy in the customized image."
    echo "  --debug                   : Run sdm without --batch option."
    echo "  --aptcache <cache_address>: Use the specified apt cache server."
    exit 1
}

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -f)
            IMAGE_FILE=$2
            shift
            ;;
        --hostname)
            HOSTNAME=$2
            shift
            ;;
        --autologin)
            AUTOLOGIN=1
            ;;
        --overwrite)
            OVERWRITE=1
            ;;
        --disable-wifi)
            DISABLE_WIFI=1
            ;;
        --disable-bluetooth)
            DISABLE_BLUETOOTH=1
            ;;
        --disable-triggerhappy)
            DISABLE_TRIGGERHAPPY=1
            ;;
        --debug)
            DEBUG=1
            ;;
        --aptcache)
            APTCACHE=$2
            shift
            ;;
        *)
            echo "Invalid option: $1" 1>&2
            usage
            ;;
    esac
    shift
done

# Validate input parameters
if [[ -z "${IMAGE_FILE}" ]]; then
    echo "Image file is required."
    usage
fi

# Check if the image file exists
if [[ ! -f "${IMAGE_FILE}" ]]; then
    echo "Image file does not exist."
    exit 1
fi

echo ""
echo "Using image file: ${IMAGE_FILE}"
echo ""

IMAGE_FILE_BASE=$(basename "${IMAGE_FILE}")
CUSTOMIZED_IMAGE_FILE="./${IMAGE_DEST_DIR}/${IMAGE_FILE_BASE}"
CUSTOMIZED_IMAGE_FILE_BASE=$(basename "${CUSTOMIZED_IMAGE_FILE}")

echo "Writing to ${CUSTOMIZED_IMAGE_FILE_BASE}"
echo ""

CONTAINER_IMAGE_FILE="./hostdir/${IMAGE_SOURCE_DIR}/${IMAGE_FILE_BASE}"
CONTAINER_CUSTOMIZED_IMAGE_FILE="./hostdir/${IMAGE_DEST_DIR}/${CUSTOMIZED_IMAGE_FILE_BASE}"

# Check if the customized image file exists
if [[ -f "${CUSTOMIZED_IMAGE_FILE}" ]]; then
    if [[ ${OVERWRITE} -eq 1 ]]; then
        echo "Overwriting existing file: ${CUSTOMIZED_IMAGE_FILE}"
        cp -a -f "${IMAGE_FILE}" "${CUSTOMIZED_IMAGE_FILE}"
    else
        echo "Customized image file already exists and overwrite option not set. Exiting."
        exit 1
    fi
else
    cp -a -f "${IMAGE_FILE}" "${CUSTOMIZED_IMAGE_FILE}"
fi

DOCKER_IMAGE_NAME="biosense-sdm"

docker build -t "${DOCKER_IMAGE_NAME}" .

# Construct the disables plugin string
DISABLES="piwiz"
if [[ ${DISABLE_WIFI} -eq 1 ]]; then
    DISABLES="wifi|${DISABLES}"
fi
if [[ ${DISABLE_BLUETOOTH} -eq 1 ]]; then
    DISABLES="bluetooth|${DISABLES}"
fi
if [[ ${DISABLE_TRIGGERHAPPY} -eq 1 ]]; then
    DISABLES="triggerhappy|${DISABLES}"
fi

# Construct the sdm command
SDM_COMMAND="sudo sdm --customize --extend --xmb 512"
if [[ ${DEBUG} -eq 0 ]]; then
    SDM_COMMAND="${SDM_COMMAND} --batch"
fi

SDM_COMMAND="${SDM_COMMAND} \
    --chroot \
    --plugin disables:\"${DISABLES}\" \
    --plugin @/home/agent/hostdir/sdm-plugin-commands"

if [[ -n "${APTCACHE}" ]]; then
    SDM_COMMAND="${SDM_COMMAND} --aptcache ${APTCACHE}"
fi

if [[ -n "${HOSTNAME}" ]]; then
    SDM_COMMAND="${SDM_COMMAND} --hostname ${HOSTNAME}"
fi

if [[ ${AUTOLOGIN} -eq 1 ]]; then
    SDM_COMMAND="${SDM_COMMAND} --autologin"
fi

SDM_COMMAND="${SDM_COMMAND} \
    ${CONTAINER_CUSTOMIZED_IMAGE_FILE}"

docker run --privileged -it --rm -v "$(pwd)":/home/agent/hostdir -v /dev:/dev "${DOCKER_IMAGE_NAME}" /bin/bash -c "${SDM_COMMAND}"

exit 0
